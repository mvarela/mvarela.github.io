<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Martín Varela on Martín Varela</title>
    <link>https://martin.varela.fi/</link>
    <description>Recent content in Martín Varela on Martín Varela</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Martín Varela 2017-</copyright>
    <lastBuildDate>Tue, 23 Apr 2019 22:48:23 +0300</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Coming Full Circle</title>
      <link>https://martin.varela.fi/2019/04/23/coming-full-circle/</link>
      <pubDate>Tue, 23 Apr 2019 22:48:23 +0300</pubDate>
      
      <guid>https://martin.varela.fi/2019/04/23/coming-full-circle/</guid>
      <description>
&lt;h1 id=&#34;headline-1&#34;&gt;
In the Beginning…
&lt;/h1&gt;
&lt;p&gt;
QoE sits at a confluence point between several disciplines, and one of those
is QoS. Back when I started working on these topics, &amp;#34;QoE&amp;#34; was not a thing, we
(networking people) would talk about &amp;#34;QoS from the user&amp;#39;s perspective&amp;#34;, or
similar kludgy terms, for lack of a proper one. The underlying concept,
however, was clear: how does QoS in the network affect the user&amp;#39;s perception
of media quality. 
&lt;/p&gt;
&lt;p&gt;
Back then, media quality had an implicit narrower meaning, too. VoIP was a new
thing, and doing real-time video was mostly a research topic. Times change,
technology advances, and QoE has taken a life of its own, evolving into a
wider, much more inclusive concept spanning a much wider range of application
domains.
&lt;/p&gt;
&lt;p&gt;
For some applications of QoE, however, the link to QoS, and more generally,
performance, remains strong. In particular, when dealing with monitoring and
management, we are most often interested in understanding how the performance
of the network and other resources affect the users&amp;#39; QoE.
&lt;/p&gt;
&lt;p&gt;
We typically see QoS as a lower-level construct, which in practice provides
one of the foundations of QoE; hence the plethora of so-called QoS to QoE
models in the literature. These map stuff we can measure (e.g., network QoS),
and stuff we know (encoding parameters, buffer sizes, etc.) into an
approximation of how an ideal, average user (or if we did our homework and put
some effort, a population of users) might experience the quality of a given
service. It seems clear that, in a sense, QoE sits atop QoS, but is it really
so?
&lt;/p&gt;
&lt;h1 id=&#34;headline-2&#34;&gt;
A Different Perspective
&lt;/h1&gt;
&lt;p&gt;
Over the last few years I have often worked on QoE management ideas, and over
the past year in particular, I have focused on quality monitoring for WebRTC
platforms. One common idea that comes up in this context, is that of
&amp;#34;service-level QoE&amp;#34;, or &amp;#34;the QoE of the system&amp;#34;, or similar terms. Like in the
old times, we seem to lack a proper term to describe what we are after,
despite it being a rather intuitive thing.
&lt;/p&gt;
&lt;p&gt;
On the other hand, based on the definition of QoE, it seems rather absurd to
speak of &amp;#34;the system&amp;#39;s QoE&amp;#34;, since QoE is all about &lt;em&gt;the user&lt;/em&gt;. A system (or a
service) cannot experience anything, it has neither expectations, nor an
emotional state, nor a sensory system, for that matter.
&lt;/p&gt;
&lt;p&gt;
So when we speak about &amp;#34;service-level QoE&amp;#34;, we are, at best abusing the
language, or at worst, severely confused about what QoE is. Since most of the
people I know who work on these topics are pretty knowledgeable about QoE,
I&amp;#39;ll go with the first explanation. We are abusing the language, because we
lack a suitable term for what we are working on.
&lt;/p&gt;
&lt;p&gt;
Let us illustrate this a bit with WebRTC. At &lt;a href=&#34;https://www.callstats.io/&#34;&gt;callstats.io&lt;/a&gt; we provide a WebRTC
monitoring service; our users often have several WebRTC applications, and each
application often sees hundreds, or thousands of calls a day. Calls can have
many users, and each of those users will experience a certain quality while in
the call. So far, so good, we have users, and each user&amp;#39;s QoE can be estimated
to some degree (remember kids, WebRTC is a &lt;em&gt;hard&lt;/em&gt; problem, QoE-wise!).
&lt;/p&gt;
&lt;p&gt;
But our goal is to provide a &lt;em&gt;call QoE&lt;/em&gt; value, and furthermore, an
&lt;em&gt;application QoE&lt;/em&gt; value to our users (who are not the actual users on the
call, but the service providers). While the terms themselves are rather
nonsensical when going by the &lt;a href=&#34;http://www.qualinet.eu/images/stories/QoE_whitepaper_v1.2.pdf&#34;&gt;QoE definition&lt;/a&gt;, their intent seems quite clear:
we want to know if a call was good or bad for the users, and we want to know
this for all calls across a given WebRTC service, to see if the service itself
is performing as expected (i.e., providing its users with a good experience!).
&lt;/p&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Troubles ahead
&lt;/h2&gt;
&lt;p&gt;
This pattern repeats itself in most, if not all of the QoE management
literature, where the goal is to understand, and improve the performance of a
service, and said performance is dependent on the quality experienced by
the service&amp;#39;s users.
&lt;/p&gt;
&lt;p&gt;
Behind this seemingly innocent idea, there lies a mountain of complications,
unfortunately. Our understanding of this &amp;#34;Service-level QoE&amp;#34; can take different
forms, depending on the type of service, our goals, and a host of other
factors. 
&lt;/p&gt;
&lt;p&gt;
The main idea boils down to figuring out how to create &lt;em&gt;quality aggregates&lt;/em&gt; that
allow us to build a notion of service quality on top of the individual
users&amp;#39; QoE. When digging a bit deeper, we soon encounter temporal issues
(pooling QoE over varying time scales), modeling issues &lt;a href=&#34;https://link.springer.com/article/10.1007/s41233-016-0002-1&#34;&gt;(MOS vs.
quantiles/distributions)&lt;/a&gt;, finding trends in distribution variations, etc.
&lt;/p&gt;
&lt;h1 id=&#34;headline-4&#34;&gt;
What&amp;#39;s next?
&lt;/h1&gt;
&lt;p&gt;
I suspect (and hope) we will see more work on this topic over the coming
years, eventually converging towards a proper definition for this idea of
&lt;em&gt;Quality of Service&lt;/em&gt; (nice term, but too loaded to use, isn&amp;#39;t it?).
&lt;/p&gt;
&lt;p&gt;
Working on WebRTC has yielded some insight on aggregating quality, but it&amp;#39;s
not yet mature enough, nor general enough to put it out there as a solution
candidate for this problem.
&lt;/p&gt;
&lt;p&gt;
For the time being, &lt;em&gt;service-level QoE aggregates&lt;/em&gt; might be a good first-order
approximation to putting a name to this idea, though a bit lacking in the
marketing department.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fundamental Relationships for Deriving QoE in Systems</title>
      <link>https://martin.varela.fi/publication/varela-qomex19/</link>
      <pubDate>Sun, 03 Mar 2019 18:22:44 +0300</pubDate>
      
      <guid>https://martin.varela.fi/publication/varela-qomex19/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Some things we might have missed along the way (keynote speech)</title>
      <link>https://martin.varela.fi/talk/talk-26/</link>
      <pubDate>Mon, 18 Feb 2019 09:00:00 +0100</pubDate>
      
      <guid>https://martin.varela.fi/talk/talk-26/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Interplay between QoE, User Behavior and System Blocking in QoE Management</title>
      <link>https://martin.varela.fi/publication/varela-qoem-2019/</link>
      <pubDate>Mon, 18 Feb 2019 06:40:42 +0300</pubDate>
      
      <guid>https://martin.varela.fi/publication/varela-qoem-2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Example Page</title>
      <link>https://martin.varela.fi/tutorial/example/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 +0300</pubDate>
      
      <guid>https://martin.varela.fi/tutorial/example/</guid>
      <description>

&lt;p&gt;In this tutorial, I&amp;rsquo;ll share my top 10 tips for getting started with Academic:&lt;/p&gt;

&lt;h2 id=&#34;tip-1&#34;&gt;Tip 1&lt;/h2&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;tip-2&#34;&gt;Tip 2&lt;/h2&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Some Observations on Emerging Aspects in QoE Modeling and Their Impact on QoE Management</title>
      <link>https://martin.varela.fi/publication/varela-qoem-2018/</link>
      <pubDate>Sat, 26 May 2018 06:40:42 +0300</pubDate>
      
      <guid>https://martin.varela.fi/publication/varela-qoem-2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Survey of Emerging Concepts and Challenges for QoE Management of Multimedia Services </title>
      <link>https://martin.varela.fi/publication/varela-tomm18/</link>
      <pubDate>Tue, 01 May 2018 06:40:42 +0300</pubDate>
      
      <guid>https://martin.varela.fi/publication/varela-tomm18/</guid>
      <description></description>
    </item>
    
    <item>
      <title>QoE Vadis</title>
      <link>https://martin.varela.fi/publication/varela-dagstuhl-perspectives/</link>
      <pubDate>Tue, 17 Apr 2018 06:40:42 +0300</pubDate>
      
      <guid>https://martin.varela.fi/publication/varela-dagstuhl-perspectives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>What You Pay Is What You Get? — Fundamentals of Charging Internet Services Based on End User Quality of Experience</title>
      <link>https://martin.varela.fi/publication/varela-quex18-2/</link>
      <pubDate>Mon, 09 Apr 2018 06:40:42 +0300</pubDate>
      
      <guid>https://martin.varela.fi/publication/varela-quex18-2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>QoE Analysis of the Setup of Different Internet Services for FIFO Server Systems</title>
      <link>https://martin.varela.fi/publication/varela-mmb18/</link>
      <pubDate>Mon, 26 Feb 2018 06:40:42 +0300</pubDate>
      
      <guid>https://martin.varela.fi/publication/varela-mmb18/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A New QoE Fairness Index for QoE Management</title>
      <link>https://martin.varela.fi/publication/varela-quex18/</link>
      <pubDate>Fri, 09 Feb 2018 06:40:42 +0300</pubDate>
      
      <guid>https://martin.varela.fi/publication/varela-quex18/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Fractals — Complexity from Simplicity — Part 2</title>
      <link>https://martin.varela.fi/2017/10/02/fractals-complexity-from-simplicity-part-2/</link>
      <pubDate>Mon, 02 Oct 2017 19:23:43 +0300</pubDate>
      
      <guid>https://martin.varela.fi/2017/10/02/fractals-complexity-from-simplicity-part-2/</guid>
      <description>
&lt;h1 id=&#34;headline-1&#34;&gt;
Beyond L-Systems
&lt;/h1&gt;
&lt;p&gt;
In the &lt;a href=&#34;http://martin.varela.fi/post/fractals-complexity-from-simplicity/&#34;&gt;first part of this post&lt;/a&gt;, we went over Lindenmayer systems, and saw how
from small sets of very simple rules, complexity emerged in the form of
intricate patterns. In this part, we will look at two other types of fractals.
The first one, is called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Barnsley_fern&#34;&gt;Barnsley fern&lt;/a&gt;, and unlike the L-systems in the
previous post, it is based not on string substitution, but on the repeated
iteration of affine transformations to a starting point. The second fractal
we&amp;#39;ll cover in this post is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Mandelbrot_set&#34;&gt;Mandelbrot set&lt;/a&gt;, which may well be the &amp;#34;most
famous&amp;#34; fractal out there, and for good reason, as it it really fascinating.
&lt;/p&gt;
&lt;h1 id=&#34;headline-2&#34;&gt;
Between Many Ferns
&lt;/h1&gt;
&lt;p&gt;
The Barnsley fern is built by applying, in an iterative fashion, a series of
affine transformations to a point. The transformations are chosen randomly
between four possible ones, and the probability of choosing each one at each
iteration is given by a fixed distribution, as follows.
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Transformation&lt;/th&gt;
&lt;th class=&#34;align-right&#34;&gt;Probability&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$f1$&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0.01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$f2$&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0.85&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$f3$&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0.07&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$f4$&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0.07&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Each transformation has the form $Av^∫ercal + w$, where $A$ is a $2×2$ matrix,
$v=(x,y)$ is the point being transformed, and $w$ is a constant vector. If $A$ is of
the form $$ \begin{pmatrix} a&amp;amp;b \\ c&amp;amp;d \end{pmatrix}$$ and $w$ is of the form
$$ \begin{pmatrix} e \\ f\end{pmatrix}$$ then we have
$$f(x,y) = \begin{pmatrix} ax + by + e \\ cx + dy + f \end{pmatrix} $$
&lt;/p&gt;
&lt;p&gt;
The coefficients for the $f1⋯ f4$ transformations are as follows:
&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Transforms&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;Coeff.&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;a&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;b&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;c&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;d&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;e&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$f1$&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0.16&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$f2$&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0.85&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0.04&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;-0.04&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0.85&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$f3$&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0.2&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;-0.26&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0.23&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0.22&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;1.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$f4$&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;-0.15&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0.28&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0.26&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0.24&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;align-right&#34;&gt;0.44&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
We can start putting this to code, by defining the transformations and their
application:
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;ns &lt;/span&gt;fractals.barnsley
  (&lt;span style=&#34;color:#e6db74&#34;&gt;:require&lt;/span&gt; [fractals.util &lt;span style=&#34;color:#e6db74&#34;&gt;:as&lt;/span&gt; util]    &lt;span style=&#34;color:#75715e&#34;&gt;;; We&amp;#39;ll use a helper to scale the plot to the canvas&lt;/span&gt;
            [hiccup.core &lt;span style=&#34;color:#e6db74&#34;&gt;:as&lt;/span&gt; hiccup]))  &lt;span style=&#34;color:#75715e&#34;&gt;;; And hiccup to generate the HTML/SVG&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;transforms {&lt;span style=&#34;color:#e6db74&#34;&gt;:f1&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.16&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
                 &lt;span style=&#34;color:#e6db74&#34;&gt;:f2&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.85&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.04&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-0.04&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.85&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.6&lt;/span&gt;]
                 &lt;span style=&#34;color:#e6db74&#34;&gt;:f3&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-0.26&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.23&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.22&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.6&lt;/span&gt;]
                 &lt;span style=&#34;color:#e6db74&#34;&gt;:f4&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;-0.15&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.28&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.26&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.24&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.44&lt;/span&gt;]})


(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn- &lt;/span&gt;apply-transform [point coeffs]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; coeffs)
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[[x y] point
          [a b c d e f] coeffs
          xx  (+ (* a x) (* b y) e)
          yy  (+ (* c x) (* d y) f)]
      [xx yy])))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
With that done, we can proceed to implement the actual Barnsley fern fractal.
First, we pick the transformations with the given probability distribution
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn- &lt;/span&gt;transform-probs [i]
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
    (&amp;lt;= i &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;:f1&lt;/span&gt;
    (&amp;lt;= i (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.85&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;:f2&lt;/span&gt;
    (&amp;lt;= i (+ &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.85&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.07&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;:f3&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;:true&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:f4&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We can now iterate on our starting point, for however many iterations we want to
do.
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;barnsley-fern [num-points]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[probs (&lt;span style=&#34;color:#a6e22e&#34;&gt;repeatedly&lt;/span&gt; num-points rand)
        coeflist (map (comp transforms transform-probs) probs)]
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;reductions&lt;/span&gt; apply-transform [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] coeflist)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Basically, what we are doing is choosing a sequence of transformations to apply
(randomly, according to the given distribution), and then reducing the actual
transformation, starting on the origin, and keeping all intermediate results.
This gives us a list of points of the form $(f&lt;sub&gt;i_1&lt;/sub&gt;(0,0),f&lt;sub&gt;i_2&lt;/sub&gt;(f&lt;sub&gt;i_1&lt;/sub&gt;(0,0)),
f&lt;sub&gt;i_3&lt;/sub&gt;(f&lt;sub&gt;i_2&lt;/sub&gt;(f&lt;sub&gt;i_1&lt;/sub&gt;(0,0))), ⋯)$, where each $i_j ∈ {1,2,3,4}$.
&lt;/p&gt;
&lt;p&gt;
All that is left to do now is render this series of points. We&amp;#39;ll do them as
tiny SVG circles, similar to how we did with polylines for the L-system fractals
in the previous post.
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn- &lt;/span&gt;render-svg-points [plot-points size]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[xmlns &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.w3.org/2000/svg&amp;#34;&lt;/span&gt;
        style &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stroke:#5f7f5fBB; fill:#5f7f5fBB;&amp;#34;&lt;/span&gt;
        scale-bf (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[x y]] [(* &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; x) (* &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; y)])
        points (&lt;span style=&#34;color:#a6e22e&#34;&gt;util/fix-coords&lt;/span&gt; (map scale-bf plot-points) size)
        do-circle (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[pt] (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[[x y] pt]
                             [&lt;span style=&#34;color:#e6db74&#34;&gt;:circle&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:cx&lt;/span&gt; (str x)
                                       &lt;span style=&#34;color:#e6db74&#34;&gt;:cy&lt;/span&gt; (str y)
                                       &lt;span style=&#34;color:#e6db74&#34;&gt;:r&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.2&amp;#34;&lt;/span&gt;
                                       &lt;span style=&#34;color:#e6db74&#34;&gt;:style&lt;/span&gt; style}]))
        circles (&lt;span style=&#34;color:#a6e22e&#34;&gt;vec&lt;/span&gt; (conj (map do-circle  points) &lt;span style=&#34;color:#e6db74&#34;&gt;:g&lt;/span&gt;))]
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;hiccup/html&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;:html&lt;/span&gt;
                  [&lt;span style=&#34;color:#e6db74&#34;&gt;:div&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:padding&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;}
                   [&lt;span style=&#34;color:#e6db74&#34;&gt;:svg&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:width&lt;/span&gt; size
                          &lt;span style=&#34;color:#e6db74&#34;&gt;:height&lt;/span&gt; size
                          &lt;span style=&#34;color:#e6db74&#34;&gt;:xmlns&lt;/span&gt; xmlns}
                    circles]]])))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;do-BF [num-points]
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;spit&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;barnsley-fern.html&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;render-svg-points&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;barnsley-fern&lt;/span&gt; num-points) &lt;span style=&#34;color:#ae81ff&#34;&gt;40000&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Running this with 40K points renders the following.
&lt;/p&gt;
&lt;img src=&#34;https://martin.varela.fi/img/fractals/barnsley.png&#34; alt=&#34;/img/fractals/barnsley.png&#34; title=&#34;/img/fractals/barnsley.png&#34; width=&#34;1200px&#34;/&gt;
&lt;p&gt;
The actual SVG can be found &lt;a href=&#34;http:/html/fractals/barnsley-fern.html&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
It is interesting to see how the whole pattern repeats in each leaf portion.
Looking closer, we can find the whole fern leaf repeated in each part of itself.
&lt;/p&gt;
&lt;h1 id=&#34;headline-3&#34;&gt;
And Now for the Main Attraction…
&lt;/h1&gt;
&lt;p&gt;
The Mandelbrot set is a favorite of mine, and I have to admit that when writing
the code for this renderer, I spent much more time than I had expected just
playing with it, really fascinated by its complexity and beauty.
&lt;/p&gt;
&lt;p&gt;
The Mandelbrot set $M$ is defined on the complex plane, as those points $c$ for which
the following recurrence remains bounded:
$$ z&lt;sub&gt;n+1&lt;/sub&gt; = z^2_n + c$$ with $z_0 = 0$.
&lt;/p&gt;
&lt;p&gt;
In particular, $c ∈ M$ if $limsuplimits&lt;sub&gt;n→
∞&lt;/sub&gt;≤ft|z_n\right| ≤q 2$.
&lt;/p&gt;
&lt;p&gt;
In software, we can only approximate the limit of this recurrence with a given
number of iterations, which we refer to as &lt;em&gt;depth&lt;/em&gt;. The deeper we iterate, the
more detail we will obtain in our rendering of the set. A basic approach to
generating the set would consist of defining a depth, a section of the complex
plane where the points we consider will be, and a mapping from a set of pixels
to these points. We then calculate, for each pixel, whether the recurrence
diverges or remains bounded within the given number of iterations, and then
assign a boolean value to whether the point represented by the pixel belongs to
the set.
&lt;/p&gt;
&lt;p&gt;
We can do a bit better, by considering, instead of a binary value, the number of
iterations that it took for the recurrence to diverge at each point not in the
set. This allows for a bit more nuanced representation when we render it.
&lt;/p&gt;
&lt;p&gt;
In code:
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;ns &lt;/span&gt;fractals.mandelbrot
  (&lt;span style=&#34;color:#e6db74&#34;&gt;:require&lt;/span&gt; [com.evocomputing.colors &lt;span style=&#34;color:#e6db74&#34;&gt;:as&lt;/span&gt; c]  &lt;span style=&#34;color:#75715e&#34;&gt;;; we&amp;#39;ll use the HSV space for coloring&lt;/span&gt;
            [clojure.string &lt;span style=&#34;color:#e6db74&#34;&gt;:refer&lt;/span&gt; [join]])
  (&lt;span style=&#34;color:#e6db74&#34;&gt;:import&lt;/span&gt; [java.io File]
           [javax.imageio ImageIO]
           [java.awt Color]
           [java.awt.image BufferedImage]))  &lt;span style=&#34;color:#75715e&#34;&gt;;; some java interop for rendering PNGs&lt;/span&gt;

(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn- &lt;/span&gt;square-z [r i]
  [(- (* r r) (* i i)) (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; r i)])

(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn- &lt;/span&gt;in-mandelbrot? [point iter]
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This function will return 0 if the point is in the set, and otherwise, the
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  number of remaining iterations remaining (out of the original maximum), if the
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  point &amp;#39;escapes&amp;#39; from the set&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[values (iterate &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(map + point (&lt;span style=&#34;color:#a6e22e&#34;&gt;square-z&lt;/span&gt; (first %) (second %))) [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
        test  (&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;[acc [r i]]
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(or (&amp;gt;= acc iter) (&amp;gt; (+ (* r r)(* i i)) &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;reduced&lt;/span&gt; acc)
                  (inc acc)))
        counted (reduce test &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; values)]
    (- iter counted)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In order to actually render the set, we need a bit more work, as we need to
define the mapping of our view-port to a section of the complex plane.
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn- &lt;/span&gt;scale-to-bounds
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This function takes a point [x y] in an plot area [[0 0] [xmax ymax]],
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  and maps it to a bounding box in the real plane where the plotting will be
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  done. The bounding box is defined by its lower left and upper right corners,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  and in practice, should not be much larger than [[-2.5 -1] [1 1]], which is
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  where the fun stuff happens&amp;#34;&lt;/span&gt;
  [point img-size bounding-box]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[[x y] point
        [xmax ymax] img-size
        [[b-x-min b-y-min][b-x-max b-y-max]] bounding-box
        bx-span (- b-x-max b-x-min)
        by-span (- b-y-max b-y-min)
        xx (- (* bx-span (/ x xmax)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;Math/abs&lt;/span&gt; b-x-min))
        yy (- (* by-span (/ y ymax)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;Math/abs&lt;/span&gt; b-y-min))]
    [xx yy]))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;mandelbrot [size bounding-box depth]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[[xmax ymax] size
        points (for [y (range ymax)
                     x (range xmax)]
                 [x y])
        f (&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;[i](-&amp;gt; i
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;scale-to-bounds&lt;/span&gt; size bounding-box)
                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;in-mandelbrot?&lt;/span&gt; depth)))]
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;pmap&lt;/span&gt; f points)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
With these two functions, we have now a representation we can use for plotting.
We can map the view-port to a section of the plane with the &lt;code&gt;scale-to-bounds&lt;/code&gt;
function, and then for each point in the view-port, calculate the number of
iterations it took to diverge. This code is simple to understand, but not really
efficient. I suspect there&amp;#39;s a bit of stream fusion that could be applied here
(possibly using transducers in Clojure), or otherwise switch to using mutable
state, but for the sake of simplicity, I&amp;#39;d rather have this pure version for
now.
&lt;/p&gt;
&lt;p&gt;
Now we can render our set. As a first approach, we could simply use the &lt;a href=&#34;https://en.wikipedia.org/wiki/Netpbm_format&#34;&gt;PPM
ASCII format&lt;/a&gt;, which is trivial to implement without any external library:
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;do-ppm [points size depth name]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[[x y] size
        contents (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; points
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;partition&lt;/span&gt; x)
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;reverse&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;;; otherwise we mirror on the x axis&lt;/span&gt;
                      (map &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; (map str %)))
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;interpose&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;)
                      (apply str)
                      )
        header (str &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P2\n&amp;#34;&lt;/span&gt; (str x) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;
                    (str y) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;
                    (str depth) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;)]
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;spit&lt;/span&gt; name (str header contents))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The above code is nothing fancy, but it gets us something to look at (and even
within Emacs!):
&lt;/p&gt;
&lt;img src=&#34;https://martin.varela.fi/img/fractals/full-ppm.png&#34; alt=&#34;/img/fractals/full-ppm.png&#34; title=&#34;/img/fractals/full-ppm.png&#34; width=&#34;1200px&#34;/&gt;
&lt;p&gt;
This is pretty cool! However, we can easily do better. We will use a bit of our
host platform to render color PNGs. This will require two things, firstly,
mapping the values we have to color values, and secondly, rendering the PNG
itself. Since we have a sort of &amp;#34;intensity&amp;#34; value for each pixel, in the form of
the number of iterations, we will calculate the color in the HSV space, using a
fixed hue and saturation, and scaling the number of iterations to the value of
the color. This will render the points in the set in black, and those not in it
in different shades.
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;do-color [i depth]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[icorr (/ (* i &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;) depth)
        [r g b] (&lt;span style=&#34;color:#a6e22e&#34;&gt;c/hsl-to-rgb&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;205&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; icorr)]
    (bit-or (bit-shift-left r &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
            (bit-shift-left g &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
            b)))


(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;do-png [points size depth name]
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;ImageIO/write&lt;/span&gt;
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[width (first size)
         height (second size)
         pts (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; points
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;partition&lt;/span&gt; width)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;reverse&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;;; the y axies grows &amp;#34;downwards&amp;#34; in the PNG&lt;/span&gt;
                  (map vec)
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;vec&lt;/span&gt;))
         out (&lt;span style=&#34;color:#66d9ef&#34;&gt;new &lt;/span&gt;BufferedImage width height  BufferedImage/TYPE_3BYTE_BGR)]
     (doseq [x (range width)
             y (range height)]
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;.setRGB&lt;/span&gt; out x y (&lt;span style=&#34;color:#a6e22e&#34;&gt;do-color&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;get-in&lt;/span&gt; pts [y x]) depth)))
     out)
   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;png&amp;#34;&lt;/span&gt;
   (&lt;span style=&#34;color:#66d9ef&#34;&gt;new &lt;/span&gt;File name )))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now we have some colors, but to be honest, the result is a bit underwhelming…
&lt;/p&gt;
&lt;img src=&#34;https://martin.varela.fi/img/fractals/full-simple.png&#34; alt=&#34;/img/fractals/full-simple.png&#34; title=&#34;/img/fractals/full-simple.png&#34; width=&#34;1200px&#34;/&gt;
&lt;p&gt;
One thing we can realize, is that most of the &amp;#34;interesting&amp;#34; parts of the render
happen around the limits of the set, so we can modify our coloring function to
reflect that. We do this by making the middle of the iteration range the
brightest, and then decrease the value as we move towards the edges of the
range. For a bit more &amp;#34;drama&amp;#34;, we also treat the saturation similarly. We redefine
then our &lt;code&gt;do-color&lt;/code&gt; function:
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;do-color
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Maps a new color with the value based on the number of iterations it took
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  for the point to escape the set. The plain mapping is rather dull, so here we
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  focus on the points which are in the boundaries (intuitively, those that took
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  long to escape, but not longest). We calculate the value as the distance
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  to the middle value, which results in a nice &amp;#39;electric&amp;#39; look around the edges
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  of the set&amp;#34;&lt;/span&gt;
  [i depth]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[ icorr (/ (* i &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;) depth)
        l (- &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; (* &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;Math/abs&lt;/span&gt; (- &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; icorr))))
        s (- &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; (* &lt;span style=&#34;color:#ae81ff&#34;&gt;1.3&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;Math/abs&lt;/span&gt; (- &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; icorr))))
        [r g b] (&lt;span style=&#34;color:#a6e22e&#34;&gt;c/hsl-to-rgb&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;205&lt;/span&gt; s l)]
    (bit-or (bit-shift-left r &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
            (bit-shift-left g &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
            b)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now this looks much better! Arguably, the color of the points that diverge very
early could be made lighter, but I like the aesthetics this coloring function
gives. In any case, there are a huge number of possible ways to apply color.
&lt;/p&gt;
&lt;img src=&#34;https://martin.varela.fi/img/fractals/full.png&#34; alt=&#34;/img/fractals/full.png&#34; title=&#34;/img/fractals/full.png&#34; width=&#34;1200px&#34;/&gt;
&lt;p&gt;
With a suitable rendering mechanism, now we can explore a bit the set, and start
looking into interesting portions. We can &amp;#34;zoom in&amp;#34; as much as we want, by
defining suitable bounding boxes, and we can increase the detail by increasing
the depth. For example, we can take a closer look at the so-called &lt;em&gt;Seahorse
valley&lt;/em&gt;.
&lt;/p&gt;
&lt;img src=&#34;https://martin.varela.fi/img/fractals/seahorse-left.png&#34; alt=&#34;/img/fractals/seahorse-left.png&#34; title=&#34;/img/fractals/seahorse-left.png&#34; width=&#34;1200px&#34;/&gt;
&lt;p&gt;
I find this area of the plane truly fascinating, the patterns and depth of it
are quite something. To give you an idea, here is a 24 megapixel render, with a
depth of 2000 iterations. Go on, click on it, and zoom in to its full size. I&amp;#39;ll
wait for you here.
&lt;/p&gt;
&lt;p&gt;
&amp;lt;a href=&amp;#34;/img/fractals/seahorse.png&amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;/img/fractals/seahorse.png&amp;#34;&amp;gt;&amp;lt;/a&amp;gt;
&lt;/p&gt;
&lt;p&gt;
Is that wonderful, or what?
&lt;/p&gt;
&lt;h1 id=&#34;headline-4&#34;&gt;
Just One More Thing
&lt;/h1&gt;
&lt;p&gt;
In order to appreciate the Mandelbrot set in all its splendor, it would be nice
to be able to &amp;#34;fall&amp;#34; into it, with an animation. Given that we have a way to
render a view-port onto any area of the plane, it&amp;#39;s not much more effort to
do it for a set of areas along a path, with different magnification levels.
&lt;/p&gt;
&lt;p&gt;
We will basically start with a target image size (and implied aspect ratio),
centered around a point, and with a given surface area on the complex plane. We
will then choose another point and another target surface area where the last
frame will be centered. All we need to do now is to create the required number
of bounding boxes, interpolating position and size over the number of frames to
render. Going back to our code:
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;ns &lt;/span&gt;fractals.animate
  (&lt;span style=&#34;color:#e6db74&#34;&gt;:require&lt;/span&gt; [fractals.mandelbrot &lt;span style=&#34;color:#e6db74&#34;&gt;:as&lt;/span&gt; m]
            [clojure.math.numeric-tower &lt;span style=&#34;color:#e6db74&#34;&gt;:as&lt;/span&gt; nt]))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;interpolate-centers [start-point end-point nframes]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[[xs ys] start-point
        [xe ye] end-point
        delta-x (- xe xs)
        delta-y (- ye ys)
        step (/ (&lt;span style=&#34;color:#a6e22e&#34;&gt;Math/sqrt&lt;/span&gt; (+ (&lt;span style=&#34;color:#a6e22e&#34;&gt;nt/expt&lt;/span&gt; delta-x &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
                              (&lt;span style=&#34;color:#a6e22e&#34;&gt;nt/expt&lt;/span&gt; delta-y &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)))
                nframes)
        theta (&lt;span style=&#34;color:#a6e22e&#34;&gt;Math/atan2&lt;/span&gt;  delta-y delta-x)
        next-center (&lt;span style=&#34;color:#66d9ef&#34;&gt;fn &lt;/span&gt;[[x y]] [(+ x (* step (&lt;span style=&#34;color:#a6e22e&#34;&gt;Math/cos&lt;/span&gt; theta)))
                                 (+ y (* step (&lt;span style=&#34;color:#a6e22e&#34;&gt;Math/sin&lt;/span&gt; theta)))])]
    (take (inc nframes) (iterate next-center start-point))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;interpolate-areas [start-area ratio nframes]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[step (&lt;span style=&#34;color:#a6e22e&#34;&gt;nt/expt&lt;/span&gt; ratio (/ &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; nframes))]
    (take (inc nframes)
          (iterate &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(/ % step) start-area))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;bounding-box [aspect-ratio area center]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[[x y] center
        dim-y (&lt;span style=&#34;color:#a6e22e&#34;&gt;nt/sqrt&lt;/span&gt; (/ area aspect-ratio))
        dim-x (* dim-y aspect-ratio)
        delta-y (/ dim-y &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
        delta-x (/ dim-x &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)]
    [[(- x delta-x) (- y delta-y)]
     [(+ x delta-x) (+ y delta-y)]]))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;animate-mandelbrot [img-width
                          img-height
                          depth
                          start-point
                          end-point
                          start-area
                          zoom-factor
                          nframes]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[centers (&lt;span style=&#34;color:#a6e22e&#34;&gt;interpolate-centers&lt;/span&gt; start-point end-point nframes)
        areas (&lt;span style=&#34;color:#a6e22e&#34;&gt;interpolate-areas&lt;/span&gt; start-area zoom-factor nframes)
        aspect-ratio (/ img-width img-height)
        size [img-width img-height]
        b-boxes (map (partial bounding-box aspect-ratio) areas centers)
        names (map (partial format &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mb-frame-%04d.png&amp;#34;&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;range&lt;/span&gt;))
        fracs (map &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m/mandelbrot&lt;/span&gt; size % depth) b-boxes)]
    (dorun (&lt;span style=&#34;color:#a6e22e&#34;&gt;pmap&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;m/do-png&lt;/span&gt; %1 size depth %2) fracs names))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This code technically has a bug, in that when the center position moves across
the x axis, the movement mirrors in the rendering (because of how the y axis
increases &amp;#34;downwards&amp;#34; on the PNG render), resulting in an angled path,
instead of a straight one. Despite this being simple to fix, I&amp;#39;ll call this a
feature, and leave it in, as it allows for some interesting zooms that would
otherwise require a more generic approach to constructing paths .
&lt;/p&gt;
&lt;p&gt;
Here is a full-HD clip of us &amp;#34;falling into the Seahorse Valley&amp;#34;. The
magnification factor here is 2400x.
&amp;lt;iframe width=&amp;#34;853&amp;#34; height=&amp;#34;480&amp;#34; src=&amp;#34;&lt;a href=&#34;https://www.youtube.com/embed/FptVUuB4qWI&#34;&gt;https://www.youtube.com/embed/FptVUuB4qWI&lt;/a&gt;&amp;#34; frameborder=&amp;#34;0&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/p&gt;
&lt;h1 id=&#34;headline-5&#34;&gt;
That&amp;#39;s All, Folks!
&lt;/h1&gt;
&lt;p&gt;
I hope you have enjoyed these posts on fractals as much as I enjoyed writing
them, they were really a lot of fun to play with! The code can be found &lt;a href=&#34;https://github.com/mvarela/Fractal-Playground&#34;&gt;on
GitHub&lt;/a&gt; if you want to play with it.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fractals — Complexity from Simplicity (and a bit of Clojure)</title>
      <link>https://martin.varela.fi/2017/09/26/fractals-complexity-from-simplicity-and-a-bit-of-clojure/</link>
      <pubDate>Tue, 26 Sep 2017 09:43:43 +0300</pubDate>
      
      <guid>https://martin.varela.fi/2017/09/26/fractals-complexity-from-simplicity-and-a-bit-of-clojure/</guid>
      <description>
&lt;h1 id=&#34;headline-1&#34;&gt;
Enter the Dragon
&lt;/h1&gt;
&lt;p&gt;
Fractals have always fascinated me. I remember seeing a render of a Mandelbrot
set back in the early 90s (when color screens started being accessible back
home), and being completely mesmerized by it. I remember being even more
fascinated by seeing a code-golf version of such a renderer, implemented in
some 300 bytes of C.
&lt;/p&gt;
&lt;p&gt;
Some days ago I came across the &amp;#34;dragon curve&amp;#34;, and decided to give it a go in
Clojure, as a way to learn a bit more and have some fun. I implemented it as a 
&lt;a href=&#34;https://en.wikipedia.org/wiki/L-system&#34;&gt;Lindenmayer system&lt;/a&gt;, which reveals the simplicity behind it.
&lt;/p&gt;
&lt;p&gt;
L-systems are string re-writing systems, and have a set of constants,
variables, rules, and a starting axiom. One starts with the axiom, and applies
the rules to it. Each rule maps a variable to a new string that substitutes
it. Constants are unaffected by the re-write, and remain in place.
&lt;/p&gt;
&lt;p&gt;
In the case of the dragon curve, it can be represented by the following
L-system (described nicely in &lt;a href=&#34;https://en.wikipedia.org/wiki/L-system#Example_6:_Dragon_curve&#34;&gt;the wiki&lt;/a&gt;):
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
    variables : X Y
    constants : F + −
    start : FX
    rules : X → X+YF+
            Y → −FX−Y
&lt;/pre&gt;
&lt;p&gt;
In order to &amp;#34;grow&amp;#34; the dragon, we iterate by applying the rules to the axiom,
and then to the result, and so on. For example, after two iterations on the
axiom, we have:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Iteration 1&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Axiom&lt;/td&gt;
&lt;td&gt;FX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Rule for X&lt;/td&gt;
&lt;td&gt;FX+YF+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Iteration 2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Rule for X&lt;/td&gt;
&lt;td&gt;FX+YF++YF+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Rule for Y&lt;/td&gt;
&lt;td&gt;FX+-FX-YF++-FX-YF+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
These simple rules, and the simple starting point lead to an increasingly
complex string, where structure starts becoming visible. Of course, doing this
by hand is extremely tedious, so we can automate it with a bit of &lt;a href=&#34;https://clojure.org/&#34;&gt;Clojure&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
We can start by defining the axiom, and the re-writing rules. 
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;ns &lt;/span&gt;dragon.core
    (&lt;span style=&#34;color:#e6db74&#34;&gt;:require&lt;/span&gt; [hiccup.core &lt;span style=&#34;color:#e6db74&#34;&gt;:as&lt;/span&gt; hiccup]))

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;start [&lt;span style=&#34;color:#e6db74&#34;&gt;:F&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:X&lt;/span&gt;])

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;rewrite [i]
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
      (= &lt;span style=&#34;color:#e6db74&#34;&gt;:X&lt;/span&gt; i) [&lt;span style=&#34;color:#e6db74&#34;&gt;:X&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:Y&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:F&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:+&lt;/span&gt;]
      (= &lt;span style=&#34;color:#e6db74&#34;&gt;:Y&lt;/span&gt; i) [&lt;span style=&#34;color:#e6db74&#34;&gt;:-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:F&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:X&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:Y&lt;/span&gt;]
      &lt;span style=&#34;color:#e6db74&#34;&gt;:true&lt;/span&gt; [i]))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We can now see what happens when we apply the rules to the axiom:
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(map rewrite start)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class=&#34;example&#34;&gt;
([:F] [:X :+ :Y :F :+])
&lt;/pre&gt;
&lt;p&gt;
This is a bit noisy due to the brackets, but we can see it&amp;#39;s the same result we
got by iterating by hand. Let&amp;#39;s add a bit more functionality:
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;dragon [segments iter]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(zero? iter)
    segments
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[segs (&lt;span style=&#34;color:#a6e22e&#34;&gt;vec&lt;/span&gt; (mapcat rewrite segments))]
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;recur&lt;/span&gt; segs (- iter &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now we can get rid of the extra brackets, and do some more iterations.
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(map (partial dragon start) (range &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class=&#34;example&#34;&gt;
([:F :X] 
 [:F :X :+ :Y :F :+] 
 [:F :X :+ :Y :F :+ :+ :- :F :X :- :Y :F :+] 
 [:F :X :+ :Y :F :+ :+ :- :F :X :- :Y :F :+ :+ :- 
  :F :X :+ :Y :F :+ :- :- :F :X :- :Y :F :+])
&lt;/pre&gt;
&lt;p&gt;
As we can see in the (slightly reformatted) results, the string&amp;#39;s size and
complexity keeps increasing. 
&lt;/p&gt;
&lt;p&gt;
In order to visualize this fractal, we need some rules on how to interpret it.
This is also very simple, and in fact, it is pretty much the same as the
&lt;a href=&#34;https://en.wikipedia.org/wiki/Turtle_graphics&#34;&gt;turtle graphics&lt;/a&gt; that were used in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Logo_(programming_language)&#34;&gt;Logo language&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
In this case, we will interpret the &lt;code class=&#34;verbatim&#34;&gt;F&lt;/code&gt; constant as &lt;code class=&#34;verbatim&#34;&gt;forward&lt;/code&gt; (that is, draw a
line in the direction the turtle is facing, and a fixed distance). The &lt;code class=&#34;verbatim&#34;&gt;+&lt;/code&gt; and
&lt;code class=&#34;verbatim&#34;&gt;-&lt;/code&gt; constants will respectively mean &lt;code class=&#34;verbatim&#34;&gt;right 90&lt;/code&gt; and &lt;code class=&#34;verbatim&#34;&gt;left 90&lt;/code&gt;, that is, to
rotate the turtle by 90 degrees in a given direction. And that&amp;#39;s all there is to
it (for now, anyway).
&lt;/p&gt;
&lt;p&gt;
We can again automate this quite easily:
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;pi&lt;span style=&#34;color:#e6db74&#34;&gt;:2&lt;/span&gt; (/ Math/PI &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;vec&lt;span style=&#34;color:#e6db74&#34;&gt;:size&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;points [segments theta acc x y]
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;empty?&lt;/span&gt; segments)
    acc
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[s  (first segments)
          xs (rest segments)]
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt;
        (or (= s &lt;span style=&#34;color:#e6db74&#34;&gt;:X&lt;/span&gt;) (= s &lt;span style=&#34;color:#e6db74&#34;&gt;:Y&lt;/span&gt;)) (&lt;span style=&#34;color:#a6e22e&#34;&gt;recur&lt;/span&gt; xs, theta, acc, x, y)
        (= s &lt;span style=&#34;color:#e6db74&#34;&gt;:+&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;recur&lt;/span&gt; xs, (+ theta pi&lt;span style=&#34;color:#e6db74&#34;&gt;:2&lt;/span&gt;), acc, x, y)
        (= s &lt;span style=&#34;color:#e6db74&#34;&gt;:-&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;recur&lt;/span&gt; xs, (- theta pi&lt;span style=&#34;color:#e6db74&#34;&gt;:2&lt;/span&gt;), acc, x, y)
        (= s &lt;span style=&#34;color:#e6db74&#34;&gt;:F&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[xx (+ x (* vec&lt;span style=&#34;color:#e6db74&#34;&gt;:size&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;Math/cos&lt;/span&gt; theta)))
                       yy (+ y (* vec&lt;span style=&#34;color:#e6db74&#34;&gt;:size&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;Math/sin&lt;/span&gt; theta)))
                       new-acc (conj acc (vector xx yy))]
(&lt;span style=&#34;color:#a6e22e&#34;&gt;recur&lt;/span&gt; xs, theta, new-acc, xx, yy))))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We basically go over the generated string, and interpret it according to the
rules described above (ignore constants, draw when we find an &lt;code class=&#34;verbatim&#34;&gt;F&lt;/code&gt;, and turn in
the indicated direction when we find a &lt;code class=&#34;verbatim&#34;&gt;+&lt;/code&gt; or a &lt;code class=&#34;verbatim&#34;&gt;-&lt;/code&gt;. This gives us a list of
points which we can then use to build an SVG &lt;code class=&#34;verbatim&#34;&gt;polyline&lt;/code&gt;. 
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;defn &lt;/span&gt;render-svg [plot-points]
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[width &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
          height &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
          xmlns &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.w3.org/2000/svg&amp;#34;&lt;/span&gt;
          style &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stroke:#474674; fill:white;&amp;#34;&lt;/span&gt;
          points (apply str (map &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(str (first %) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; (second %) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;) plot-points))]
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;hiccup/html&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;:svg&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:width&lt;/span&gt; width
                          &lt;span style=&#34;color:#e6db74&#34;&gt;:height&lt;/span&gt; height
                          &lt;span style=&#34;color:#e6db74&#34;&gt;:xmlns&lt;/span&gt; xmlns}
                    [&lt;span style=&#34;color:#e6db74&#34;&gt;:polyline&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;:points&lt;/span&gt; points
                                &lt;span style=&#34;color:#e6db74&#34;&gt;:style&lt;/span&gt; style}]])))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Here we are using the &lt;a href=&#34;https://github.com/weavejester/hiccup&#34;&gt;hiccup library&lt;/a&gt; for rendering HTML, and creating a
(potentially very large) &lt;code class=&#34;verbatim&#34;&gt;polyline&lt;/code&gt; element with all the points we defined
above.
&lt;/p&gt;
&lt;p&gt;
Now we can render our dragon and enjoy it in all its glory! 
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let &lt;/span&gt;[d    (&lt;span style=&#34;color:#a6e22e&#34;&gt;dragon&lt;/span&gt; start &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)
        pts  (&lt;span style=&#34;color:#a6e22e&#34;&gt;points&lt;/span&gt; d &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; [] &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;)
        html (&lt;span style=&#34;color:#a6e22e&#34;&gt;render-svg&lt;/span&gt; pts)]
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;spit&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dragon15.html&amp;#34;&lt;/span&gt; html)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;https://martin.varela.fi/img/fractals/dragon15.png&#34; alt=&#34;/img/fractals/dragon15.png&#34; title=&#34;/img/fractals/dragon15.png&#34; width=&#34;1200px&#34;/&gt;
&lt;p&gt;
If you are reading this in a modern browser with proper SVG support, you can
also open the generated &lt;a href=&#34;http:/html/fractals/dragon15.html&#34;&gt;HTML output&lt;/a&gt;.
&lt;/p&gt;
&lt;h1 id=&#34;headline-2&#34;&gt;
Tidying Up
&lt;/h1&gt;
&lt;p&gt;
The code snippets above are fun for playing in the Clojure REPL, but they&amp;#39;re
don&amp;#39;t generalize well, and can be improved upon significantly. In particular,
they require some fiddling with the SVG rendering view-port and the starting
point of the fractal drawing. I&amp;#39;ve cleaned up the code a bit, and made it
generic so it can support many other L-systems. It now lives on &lt;a href=&#34;https://github.com/mvarela/Fractal-Playground&#34;&gt;Github&lt;/a&gt;, along
with some other fractal code that we&amp;#39;ll discuss in an upcoming post.
&lt;/p&gt;
&lt;p&gt;
The L-system code itself, if you are interested, lives &lt;a href=&#34;https://github.com/mvarela/Fractal-Playground/blob/master/src/fractals/l_system.clj&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;h1 id=&#34;headline-3&#34;&gt;
More Fractal Goodness
&lt;/h1&gt;
&lt;p&gt;
Lindenmayer systems can give rise to very many interesting fractals, and many
self-similar constructs can also be represented as L-systems. Below you can see
some of these.
&lt;/p&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Box Fractal
&lt;/h2&gt;
&lt;pre class=&#34;example&#34;&gt;
axiom : F+F+F+F
rules : F → FF+F+F+F+FF
&lt;/pre&gt;
&lt;p&gt;
Five iterations of this system yield this:
&lt;/p&gt;
&lt;img src=&#34;https://martin.varela.fi/img/fractals/box5.png&#34; alt=&#34;/img/fractals/box5.png&#34; title=&#34;/img/fractals/box5.png&#34; width=&#34;1200px&#34;/&gt;
&lt;p&gt;
&lt;a href=&#34;http:/html/fractals/box-05.html&#34;&gt;HTML/SVG version&lt;/a&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Crystal Fractal
&lt;/h2&gt;
&lt;pre class=&#34;example&#34;&gt;
axiom : F+F+F+F
rules : F → FF+F++F+F
&lt;/pre&gt;
&lt;p&gt;
Like the Box above, this one also starts with a square (F+F+F+F).
Six iterations yield:
&lt;/p&gt;
&lt;img src=&#34;https://martin.varela.fi/img/fractals/crystal6.png&#34; alt=&#34;/img/fractals/crystal6.png&#34; title=&#34;/img/fractals/crystal6.png&#34; width=&#34;1200px&#34;/&gt;
&lt;p&gt;
&lt;a href=&#34;http:/html/fractals/crystal-06.html&#34;&gt;HTML/SVG version&lt;/a&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
Hilbert Curve
&lt;/h2&gt;
&lt;pre class=&#34;example&#34;&gt;
axiom : X
rules : X → +YF-XFX-FY+
        Y → -XF+YFY+FX-
&lt;/pre&gt;
&lt;p&gt;
The &lt;a href=&#34;https://en.wikipedia.org/wiki/Hilbert_curve&#34;&gt;Hilbert curve&lt;/a&gt; is a well-known space-filling fractal. It does get quite dense
rather quickly. After only 9 iterations, it looks like this.
&lt;/p&gt;
&lt;img src=&#34;https://martin.varela.fi/img/fractals/hilbert9.png&#34; alt=&#34;/img/fractals/hilbert9.png&#34; title=&#34;/img/fractals/hilbert9.png&#34; width=&#34;1200px&#34;/&gt;
&lt;p&gt;
&lt;a href=&#34;http:/html/fractals/hilbert-09.html&#34;&gt;HTML/SVG version (LARGE FILE!)&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Zooming in a bit, we can better discern the structure:
&lt;/p&gt;
&lt;img src=&#34;https://martin.varela.fi/img/fractals/hilbert9zoom.png&#34; alt=&#34;/img/fractals/hilbert9zoom.png&#34; title=&#34;/img/fractals/hilbert9zoom.png&#34; width=&#34;1200px&#34;/&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
Koch Curve
&lt;/h2&gt;
&lt;pre class=&#34;example&#34;&gt;
axiom : F+F+F+F
rules : F → FF+F+F+F+FF
&lt;/pre&gt;
&lt;p&gt;
This one also becomes complex very quickly. At four iterations, it looks like this:
&lt;/p&gt;
&lt;img src=&#34;https://martin.varela.fi/img/fractals/koch4.png&#34; alt=&#34;/img/fractals/koch4.png&#34; title=&#34;/img/fractals/koch4.png&#34; width=&#34;1200px&#34;/&gt;
&lt;p&gt;
&lt;a href=&#34;http:/html/fractals/koch-curve-04.html&#34;&gt;HTML/SVG version&lt;/a&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
Koch Snowflake
&lt;/h2&gt;
&lt;pre class=&#34;example&#34;&gt;
axiom : F--F--F
rules : F → F+F--F+F
&lt;/pre&gt;
&lt;p&gt;
This is another well-known fractal.
&lt;/p&gt;
&lt;img src=&#34;https://martin.varela.fi/img/fractals/snowflake9.png&#34; alt=&#34;/img/fractals/snowflake9.png&#34; title=&#34;/img/fractals/snowflake9.png&#34; width=&#34;1200px&#34;/&gt;
&lt;p&gt;
&lt;a href=&#34;http:/html/fractals/koch-snowflake-09.html&#34;&gt;HTML/SVG version&lt;/a&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
Rings
&lt;/h2&gt;
&lt;pre class=&#34;example&#34;&gt;
axiom : F+F+F+F
rules : F → FF+F+F+F+F+F-F
&lt;/pre&gt;
&lt;p&gt;
This one is quite eye-catching. After six itertations, we get:
&lt;/p&gt;
&lt;img src=&#34;https://martin.varela.fi/img/fractals/rings6.png&#34; alt=&#34;/img/fractals/rings6.png&#34; title=&#34;/img/fractals/rings6.png&#34; width=&#34;1200px&#34;/&gt;
&lt;p&gt;
&lt;a href=&#34;http:/html/fractals/rings-06.html&#34;&gt;HTML/SVG version&lt;/a&gt;
&lt;/p&gt;
&lt;h2 id=&#34;headline-10&#34;&gt;
Sierpiński Triangle
&lt;/h2&gt;
&lt;pre class=&#34;example&#34;&gt;
axiom : F-G-G
rules : F → F-G+F+G-F
        G → GG
&lt;/pre&gt;
&lt;p&gt;
The Sierpiński triangle is another very well known fractal. Unlike the ones seen
above, it has two &lt;code class=&#34;verbatim&#34;&gt;forward&lt;/code&gt; variables, &lt;code class=&#34;verbatim&#34;&gt;F&lt;/code&gt; and &lt;code class=&#34;verbatim&#34;&gt;G&lt;/code&gt;. After 8 iterations, it
results in this:
&lt;/p&gt;
&lt;img src=&#34;https://martin.varela.fi/img/fractals/sierpinski8.png&#34; alt=&#34;/img/fractals/sierpinski8.png&#34; title=&#34;/img/fractals/sierpinski8.png&#34; width=&#34;1200px&#34;/&gt;
&lt;h1 id=&#34;headline-11&#34;&gt;
More to Come!
&lt;/h1&gt;
&lt;p&gt;
In this post we have covered the basics of L-system based fractals. There is a
bit more to them, as more &amp;#34;commands&amp;#34; can be embedded in the fractal string, such
as &lt;code class=&#34;verbatim&#34;&gt;moving&lt;/code&gt; the turtle without drawing, and &lt;code class=&#34;verbatim&#34;&gt;pushing&lt;/code&gt; and &lt;code class=&#34;verbatim&#34;&gt;popping&lt;/code&gt; state onto a
stack, to allow for the generation of more complex patterns. The L-system
processing code on Github has some partial support for those, but the renderer
doesn&amp;#39;t, so some further work is needed there.
&lt;/p&gt;
&lt;p&gt;
A &lt;a href=&#34;http://martin.varela.fi/post/fractals-complexity-from-simplicity-part2/&#34;&gt;second part&lt;/a&gt; to this incursion into fractals is upcoming. There we&amp;#39;ll look into
two different types of fractals. The first type is based on affine
transformations and stochastic processes, and the second one is the famous
&lt;a href=&#34;https://en.wikipedia.org/wiki/Mandelbrot_set&#34;&gt;Mandelbrot set&lt;/a&gt;.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple Binary Data Visualization</title>
      <link>https://martin.varela.fi/2017/09/09/simple-binary-data-visualization/</link>
      <pubDate>Sat, 09 Sep 2017 09:33:46 +0300</pubDate>
      
      <guid>https://martin.varela.fi/2017/09/09/simple-binary-data-visualization/</guid>
      <description>
&lt;h1 id=&#34;headline-1&#34;&gt;
Introduction
&lt;/h1&gt;
&lt;p&gt;
A few days ago I ran across &lt;a href=&#34;https://news.ycombinator.com/item?id=15164166&#34;&gt;this discussion on Hacker News&lt;/a&gt;, which referred to
&lt;a href=&#34;https://codisec.com/binary-visualization-explained/&#34;&gt;this article&lt;/a&gt; on binary data visualization. The folks at &lt;a href=&#34;https://codisec.com&#34;&gt;Codisec&lt;/a&gt; have developed a
tool called Veles for visualizing binary files. The idea is to help detect
patterns in the data, which in some cases are useful for e.g,. security-related
analysis.
&lt;/p&gt;
&lt;p&gt;
The technique described was surprisingly simple, in that it looks at digrams or
trigrams in the file, and then it analyses their frequency and spatial
distribution within the data. This is not unlike the use of &lt;em&gt;n-grams&lt;/em&gt; in
computational linguistics, or &lt;em&gt;k-mers&lt;/em&gt; in computational genomics. The idea is to
analyze and model sequences of elements (be it words, phonemes, or DNA bases). A
fun application of this type of analysis is the creation of Markov chain text
generators, which use the probability distribution of n-grams in a text corpus to
synthesize text with similar characteristics. A couple of popular examples of
these generators is the creation of &lt;a href=&#34;http://www.elsewhere.org/pomo/&#34;&gt;parody post-modernist writings&lt;/a&gt;, or &lt;a href=&#34;https://pdos.csail.mit.edu/archive/scigen/#about&#34;&gt;bogus
scientific papers&lt;/a&gt; (many of which have been accepted to predatory conferences and
journals, to the amusement and dismay of many).
&lt;/p&gt;
&lt;p&gt;
Basically, the approach taken in Veles is to take byte trigrams of the form $(i,
i+1, i+2)$ from the file, and use them to represent points in a 3D space (a
digram-based 2D version is also described). Being sequences of bytes, the space
is limited to a 256x256x256 cube. The Veles visualization uses luminance to
represent the (normalized) frequency of each point in the file, resulting in
very nice-looking, and surprisingly structured visualizations. The tool also
assigns different hues to points, based on their position in the file (which is
divided into 256 equally-sized bins for this purpose).
&lt;/p&gt;
&lt;h1 id=&#34;headline-2&#34;&gt;
A Simple Take on Binary Visualization
&lt;/h1&gt;
&lt;p&gt;
In this post, I&amp;#39;ll show how a similar type of visualization can be simply
created in a few lines of R, using &lt;code class=&#34;verbatim&#34;&gt;ggplot2&lt;/code&gt;. We&amp;#39;ll make 2d plots instead of the
(admittedly nicer looking) 3d ones that Veles does, but similar information
about the structure of the files can be gleaned from them.
&lt;/p&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Getting Our Data in Shape
&lt;/h2&gt;
&lt;p&gt;
Our data will be the bytes in the file, repeated twice next to each other with
an offset of one for each repetition. This is a common pattern for example in
Haskell and Lisp, basically &lt;code class=&#34;verbatim&#34;&gt;zip&lt;/code&gt; &amp;#39;ping a list with its own tail. In R, we can
use the &lt;code class=&#34;verbatim&#34;&gt;lead&lt;/code&gt; or &lt;code class=&#34;verbatim&#34;&gt;lag&lt;/code&gt; functions provided in Hadley Wickham&amp;#39;s &lt;code class=&#34;verbatim&#34;&gt;dplyr&lt;/code&gt; package.
&lt;/p&gt;
&lt;div class=&#34;src src-r&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;library&lt;/span&gt;(tidyverse)

  a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
  lead(a)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class=&#34;example&#34;&gt;
Loading tidyverse: ggplot2
Loading tidyverse: tibble
Loading tidyverse: tidyr
Loading tidyverse: readr
Loading tidyverse: purrr
Loading tidyverse: dplyr
Conflicts with tidy packages ---------------------------------------------------
filter(): dplyr, stats
lag():    dplyr, stats
 [1]  2  3  4  5  6  7  8  9 10 NA
&lt;/pre&gt;
&lt;p&gt;
We can see that &lt;code class=&#34;verbatim&#34;&gt;lead&lt;/code&gt; has shifted &lt;code class=&#34;verbatim&#34;&gt;a&lt;/code&gt; to the left, introducing a &lt;code class=&#34;verbatim&#34;&gt;NA&lt;/code&gt; value at
the end. If we create a dataframe or tibble with &lt;code class=&#34;verbatim&#34;&gt;a&lt;/code&gt;, &lt;code class=&#34;verbatim&#34;&gt;lead(a)&lt;/code&gt; and &lt;code class=&#34;verbatim&#34;&gt;lead(lead(a))&lt;/code&gt; , we will obtain a table of trigrams.
&lt;/p&gt;
&lt;div class=&#34;src src-r&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt; zipped &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; as.tibble(&lt;span style=&#34;color:#66d9ef&#34;&gt;cbind&lt;/span&gt;(a, lead(a), lead(a,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)))
 glimpse(zipped)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class=&#34;example&#34;&gt;
Observations: 10
Variables: 3
$ a  &amp;lt;int&amp;gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
$ `` &amp;lt;int&amp;gt; 2, 3, 4, 5, 6, 7, 8, 9, 10, NA
$ `` &amp;lt;int&amp;gt; 3, 4, 5, 6, 7, 8, 9, 10, NA, NA
&lt;/pre&gt;
&lt;p&gt;
This is close to what we need, except for the &lt;code class=&#34;verbatim&#34;&gt;NA&lt;/code&gt; values, which we can easily
remove with &lt;code class=&#34;verbatim&#34;&gt;drop_na&lt;/code&gt;, &lt;code class=&#34;verbatim&#34;&gt;na.omit&lt;/code&gt;, or &lt;code class=&#34;verbatim&#34;&gt;filter&lt;/code&gt;.
&lt;/p&gt;
&lt;div class=&#34;src src-r&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt; zipped &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; drop_na()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class=&#34;example&#34;&gt;
: # A tibble: 8 x 3
:       a    ``    ``
:   &lt;int&gt; &lt;int&gt; &lt;int&gt;
: 1     1     2     3
: 2     2     3     4
: 3     3     4     5
: 4     4     5     6
: 5     5     6     7
: 6     6     7     8
: 7     7     8     9
: 8     8     9    10
&lt;/pre&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Plotting
&lt;/h2&gt;
&lt;p&gt;
We will use a basic scatter plot to visualize our data. In order to make up for
the lack of a third dimension in the plots, we will use a couple of tricks to
add more information. First, we&amp;#39;ll use a low alpha value, which will help us get
a notion of density in the plot (we&amp;#39;ll later add actual density plots, too). The
more times an $(x,y)$ pair (corresponding to bytes $(i,i+1)$ in the file) is
found in the data, the more opaque it&amp;#39;ll show on the scatter plot. Second, we&amp;#39;ll
use the $z$ (corresponding to byte $i+2$) to determine the color of the point.
In this way, we will pack more information into the plot. We will also discuss
other possible alternatives for visualizing this information at the end of the post.
&lt;/p&gt;
&lt;p&gt;
For the time being, we won&amp;#39;t consider the location within the file, though as we
will see, it would be simple to add this information as well.
&lt;/p&gt;
&lt;p&gt;
Let us quickly see how we can setup the visualization. 
&lt;/p&gt;
&lt;div class=&#34;src src-r&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;  x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sample&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50000&lt;/span&gt;, replace &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)
  y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; lead(x)
  z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; lead(x,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
  data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;cbind&lt;/span&gt;(x,y,z) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; as.tibble() &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; na.omit()
  binplot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; ggplot(aes(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x, y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;y)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
             geom_point(mapping &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aes(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; z), alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
             scale_color_gradient(low&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, high&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
  ggsave(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;testplot.png&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class=&#34;example&#34;&gt;
Saving 7 x 7 in image
&lt;/pre&gt;
&lt;p&gt;
We can now look at the resulting plot:
&lt;/p&gt;
&lt;img src=&#34;https://martin.varela.fi/img/binViz/testplot.png&#34; alt=&#34;/img/binViz/testplot.png&#34; title=&#34;/img/binViz/testplot.png&#34; width=&#34;1200px&#34;/&gt;
&lt;p&gt;
The plot does not look like much, because we sampled uniformly distributed
random data. However, if we read a file with some structure, we will see
something more interesting. For some extra &amp;#34;meta-ness&amp;#34;, we&amp;#39;ll use the source for
this post as an input.
&lt;/p&gt;
&lt;div class=&#34;src src-r&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;  filesize &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; file.size(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post_draft.org&amp;#34;&lt;/span&gt;)
  x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readBin&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post_draft.org&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;integer&lt;/span&gt;(), n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;filesize, size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, signed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)
  y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; lead(x)
  z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; lead(x,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
  data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; as.tibble(&lt;span style=&#34;color:#66d9ef&#34;&gt;cbind&lt;/span&gt;(x,y,z)) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; na.omit()
  binplot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; ggplot(aes(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x, y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;y)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
             geom_point(mapping &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aes(color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; z), alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 
             scale_color_gradient(low&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, high&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;, limits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
             coord_cartesian(xlim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;), ylim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;))
  ggsave(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;testplot2.png&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class=&#34;example&#34;&gt;
Saving 7 x 7 in image
&lt;/pre&gt;
&lt;img src=&#34;https://martin.varela.fi/img/binViz/testplot2.png&#34; alt=&#34;/img/binViz/testplot2.png&#34; title=&#34;/img/binViz/testplot2.png&#34; width=&#34;1200px&#34;/&gt;
&lt;p&gt;
Now this is a bit more interesting! What we can see here, is that most of the
data is confined to a small section of our space. In particular, we can see both
from the points&amp;#39; color, and areas where points appear, that most values are in
the ASCII range (which is to be expected, this mostly being English text, and
ASCII codes stay the same even in an UTF-8 encoded file), with most trigrams
comprising characters in the (97—122) range, corresponding to &lt;code class=&#34;verbatim&#34;&gt;[a-z]&lt;/code&gt; (and to a
lesser degree those in &lt;code class=&#34;verbatim&#34;&gt;[A-z]&lt;/code&gt; ) and spaces (32). Where we see more transparent
points, we can infer the presence of punctuation and tokens found in the R code
and org-mode mark-up.
&lt;/p&gt;
&lt;p&gt;
In some cases, using a different coordinate system may be useful in
distinguishing structure. We can use, for instance, polar coordinates.
&lt;/p&gt;
&lt;div class=&#34;src src-r&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;   polar_plot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; binplot &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; coord_polar()
   ggsave(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;testplot2_polar.png&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class=&#34;example&#34;&gt;
Saving 7 x 7 in image
&lt;/pre&gt;
&lt;img src=&#34;https://martin.varela.fi/img/binViz/testplot2_polar.png&#34; alt=&#34;/img/binViz/testplot2_polar.png&#34; title=&#34;/img/binViz/testplot2_polar.png&#34; width=&#34;1200px&#34;/&gt;
&lt;p&gt;
Here we can also clearly see the predominance of digrams in the &lt;code class=&#34;verbatim&#34;&gt;[A-z]&lt;/code&gt; range,
and of combinations of those and spaces (the line pointing towards 32 in the NE
quadrant, and the segment of arc at 32 in the NW quadrant).
&lt;/p&gt;
&lt;p&gt;
We can also think about looking purely at the density of digrams. To this end,
we use a different geometry and stat in our plot.
&lt;/p&gt;
&lt;div class=&#34;src src-r&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;
  dens_plot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; ggplot(mapping &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aes(x,y)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
               stat_density2d(aes(fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;..&lt;/span&gt;density..), geom&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;raster&amp;#34;&lt;/span&gt;, contour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
               scale_fill_gradient(low&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;steelblue4&amp;#34;&lt;/span&gt;, high&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sienna2&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
               coord_fixed(ratio &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
  ggsave(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;testplot2_density.png&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class=&#34;example&#34;&gt;
Saving 7 x 7 in image
&lt;/pre&gt;
&lt;img src=&#34;https://martin.varela.fi/img/binViz/testplot2_density.png&#34; alt=&#34;/img/binViz/testplot2_density.png&#34; title=&#34;/img/binViz/testplot2_density.png&#34; width=&#34;1200px&#34;/&gt;
&lt;p&gt;
In this case, the density plot does not provide much additional information, but
it could be useful if we were for instance to facet the plot based on where in
the file the digrams occur, or in more complex files, where the trigram-based
coloring may obscure some of the structure.
&lt;/p&gt;
&lt;p&gt;
The density plot is also more resource-intensive, and when dealing with large
files, it may be desirable to work only on parts of the data, even for the basic
trigram-based plots. In order to do this, we can uniformly sample the data, and
thus obtain a lower resolution, but still informative view of it.
&lt;/p&gt;
&lt;h1 id=&#34;headline-5&#34;&gt;
A More Complete Solution
&lt;/h1&gt;
&lt;p&gt;
Before putting this to practice with larger, more complex files, let us put the
ideas for processing and visualizing the data into a bit more complete form in R code.
&lt;/p&gt;
&lt;p&gt;
We will create a small set of functions that allow us to play around with these
kinds of visualizations, and output the plots with an automated and systematic
naming scheme, which we could use for automatic report generation or some such
at a later stage. 
&lt;/p&gt;
&lt;div class=&#34;src src-r&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;library&lt;/span&gt;(tidyverse)

&lt;span style=&#34;color:#75715e&#34;&gt;# binviz Veles-like binary visualizaiton&lt;/span&gt;
binViz2d &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(filename, alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, maxsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5000000&lt;/span&gt;,
                    save &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, polar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;, sample &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;,
                    sample_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2000000&lt;/span&gt;, do_density &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;){

  &lt;span style=&#34;color:#75715e&#34;&gt;# setting dens_plot as NA simplifies the logic below a bit&lt;/span&gt;
  dens_plot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NA&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# we read the file as a stream of bytes, and prepare our tibble&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# We&amp;#39;ll add a column indexing the trigram position in the file&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# This will come in handy later if we want to facet the plot by position&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# as done in the Veles article. We&amp;#39;ll just mutate binViz here, to save memory.&lt;/span&gt;
  rawdata          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readBin&lt;/span&gt;(filename, &lt;span style=&#34;color:#66d9ef&#34;&gt;integer&lt;/span&gt;(), n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;maxsize, size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, signed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)
  size             &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; rawdata &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; as.tibble &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nrow&lt;/span&gt;
  binViz           &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;cbind&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;(size &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),rawdata, lead(rawdata), lead(rawdata,n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2L&lt;/span&gt;))
  &lt;span style=&#34;color:#66d9ef&#34;&gt;colnames&lt;/span&gt;(binViz) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;idx&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;)
  

  &lt;span style=&#34;color:#75715e&#34;&gt;# We then remove any missing values from the dataset&lt;/span&gt;
  toplot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; binViz &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; as.tibble &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; na.omit

  &lt;span style=&#34;color:#75715e&#34;&gt;# If sampling is required, we do it now. Sampling is important&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# if doing the density plots, as going beyond 1M points gets SLOW&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;sample&lt;/span&gt;){
   toplot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; toplot &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; sample_n(&lt;span style=&#34;color:#66d9ef&#34;&gt;min&lt;/span&gt;(count(toplot), sample_size))
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;# The actual plotting&lt;/span&gt;
  theplot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; binViz2d_do_plot(toplot, alpha, polar) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    ggtitle(title_spec(filename, &lt;span style=&#34;color:#66d9ef&#34;&gt;sample&lt;/span&gt;, sample_size))
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(do_density){
    dens_plot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; binViz2d_do_density_plot(toplot, polar)
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;# Saving the plots&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;save&lt;/span&gt;){
    namespec &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; name_spec(filename, &lt;span style=&#34;color:#66d9ef&#34;&gt;sample&lt;/span&gt;, sample_size, polar)
    binViz2d_save(namespec, theplot, dens_plot)
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;(binViz_plot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; theplot, dens_plot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dens_plot))
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The main functionality of our code is succinctly described in the &lt;code class=&#34;verbatim&#34;&gt;binViz2d&lt;/code&gt; function above. It takes a number of parameters, summarized in the table below:
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&#34;verbatim&#34;&gt;filename&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;File to visualize&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&#34;verbatim&#34;&gt;alpha&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Alpha level (transparency) of the dots (lower values are useful for larger files)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&#34;verbatim&#34;&gt;maxsize&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Maximum number of bytes to read from the file, if not sampling&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&#34;verbatim&#34;&gt;save&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Determines whether the plot should be saved to a file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&#34;verbatim&#34;&gt;polar&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Determines whether the plot should use polar coordinates&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&#34;verbatim&#34;&gt;sample&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Determines whether the file should be sampled&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&#34;verbatim&#34;&gt;sample_size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The number of samples to take, if sampling&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&#34;verbatim&#34;&gt;do_density&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Whether to do an additional density plot (sampling is &lt;em&gt;strongly advised&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
The function returns the visualization and density plots (note that the density
plot may be &lt;code class=&#34;verbatim&#34;&gt;NA&lt;/code&gt;) in a list (this list can be easily destructured using the
&lt;code class=&#34;verbatim&#34;&gt;zeallot&lt;/code&gt; package). 
&lt;/p&gt;
&lt;p&gt;
The main plotting functions are as follows.
&lt;/p&gt;
&lt;div class=&#34;src src-r&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;binViz2d_do_plot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(data, alpha, polar){
  theplot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; data  &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; ggplot(mapping &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aes(x,y)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    geom_point(mapping &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aes(color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;z), alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; alpha, size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.75&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    scale_color_gradient(low&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, high&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    coord_fixed(ratio &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    labs(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt;, y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i+1&amp;#34;&lt;/span&gt;, z&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i+2&amp;#34;&lt;/span&gt;)

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(polar){
    theplot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; theplot &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; coord_polar()
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(theplot)
}

binViz2d_do_density_plot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(toplot, polar){
  dens_plot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; toplot  &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;gt;%&lt;/span&gt; ggplot(mapping &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aes(x,y)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    stat_density2d(aes(fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;..&lt;/span&gt;density..), geom&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;raster&amp;#34;&lt;/span&gt;, contour &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    scale_fill_gradient(low&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;steelblue4&amp;#34;&lt;/span&gt;, high&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sienna2&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    coord_fixed(ratio &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    labs(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt;, y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i+1&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(dens_plot)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
These are pretty much the same as we had done above, only in function form.
&lt;/p&gt;
&lt;p&gt;
The remaining auxiliary functions take care of generating suitable titles and
filenames, as well as saving the plots.
&lt;/p&gt;
&lt;div class=&#34;src src-r&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;
title_spec &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(name, sampled, nsamples){
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(sampled){
    title &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;paste&lt;/span&gt;(name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, nsamples, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;samples.&amp;#34;&lt;/span&gt;)
  }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
    title &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; name
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(title)
}

&lt;span style=&#34;color:#75715e&#34;&gt;# We create a name separated by underscores, this simplifies later parsing&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# of file names, if needed, to automate e.g., reports creation&lt;/span&gt;
name_spec &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(name, sampled, nsamples, polar){
  polar_str     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(polar){
    polar_str   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;polar&amp;#34;&lt;/span&gt;
  }
  sampled_str   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(sampled){
    sampled_str &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sampled&amp;#34;&lt;/span&gt;, nsamples, sep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;)
  }
  basename &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;chartr&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/.&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;::&amp;#39;&lt;/span&gt;,
                     &lt;span style=&#34;color:#66d9ef&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;plot&amp;#34;&lt;/span&gt;, polar_str, sampled_str, name, sep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;))
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;basename&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.png&amp;#34;&lt;/span&gt;, sep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;))
}

binViz2d_save &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(namespec, binViz_plot, dens_plot){
    png(namespec, width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, units &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cm&amp;#34;&lt;/span&gt;, res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(binViz_plot)
    dev.off()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;is.na&lt;/span&gt;(dens_plot)){
      png(&lt;span style=&#34;color:#66d9ef&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;density&amp;#34;&lt;/span&gt;,namespec,sep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;), width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,
          units &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cm&amp;#34;&lt;/span&gt;, res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(dens_plot)
      dev.off()
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Like this, in under 100 lines of R (under 75 if removing comments and blank
lines), we can create nice and informative visualization for binary data.
&lt;/p&gt;
&lt;h1 id=&#34;headline-6&#34;&gt;
Going a Bit Further
&lt;/h1&gt;
&lt;p&gt;
As mentioned above, the Veles solution does some nice things, such as coloring
points based on their location in the file, and also they do a tomography-like
view of the 2d digram plot, by layering the plots for different parts of the
file on top of each other. 
&lt;/p&gt;
&lt;p&gt;
We can achieve comparable effects by adding facets to our plots. In the code
above, we have added some meta-data in the form of an index column. We can use
that column to create a &lt;em&gt;cut&lt;/em&gt; of the data, and then facet on this.
&lt;/p&gt;
&lt;div class=&#34;src src-r&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#let&amp;#39;s load the code we wrote above &lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;source&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;binViz2d/binViz2d.r&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;library&lt;/span&gt;(zeallot)
&lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(p,d) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;lt;-%&lt;/span&gt; binViz2d(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post_draft.org&amp;#34;&lt;/span&gt;, save&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)
fp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; facet_wrap(&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;cut&lt;/span&gt;(idx, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, labels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;))
ggsave(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;testplot2_faceted_idx.png&amp;#34;&lt;/span&gt;, width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, units &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cm&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class=&#34;example&#34;&gt;
Loading tidyverse: ggplot2
Loading tidyverse: tibble
Loading tidyverse: tidyr
Loading tidyverse: readr
Loading tidyverse: purrr
Loading tidyverse: dplyr
Conflicts with tidy packages ---------------------------------------------------
filter(): dplyr, stats
lag():    dplyr, stats
&lt;/pre&gt;
&lt;img src=&#34;https://martin.varela.fi/img/binViz/testplot2_faceted_idx.png&#34; alt=&#34;/img/binViz/testplot2_faceted_idx.png&#34; title=&#34;/img/binViz/testplot2_faceted_idx.png&#34; width=&#34;1200&#34;/&gt;
&lt;p&gt;
Adding the facets to the plot allows us to see how the structure of the file
varies along its length. For this case, there isn&amp;#39;t a noticeable difference,
since the file is just text. 
&lt;/p&gt;
&lt;p&gt;
We can do another neat thing, which is to facet on the value of the &lt;code class=&#34;verbatim&#34;&gt;z&lt;/code&gt; byte in
the trigram, and that will show us the densities of different levels in the file
contents. In the case of this post draft, we should be able to see areas with 
&lt;/p&gt;
&lt;div class=&#34;src src-r&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(p,d) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;lt;-%&lt;/span&gt; binViz2d(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post_draft.org&amp;#34;&lt;/span&gt;, save&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)
lp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; facet_wrap(&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;cut&lt;/span&gt;(z, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))
ggsave(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;testplot2_faceted_value.png&amp;#34;&lt;/span&gt;, width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, units &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cm&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;https://martin.varela.fi/img/binViz/testplot2_faceted_value.png&#34; alt=&#34;/img/binViz/testplot2_faceted_value.png&#34; title=&#34;/img/binViz/testplot2_faceted_value.png&#34; width=&#34;1200&#34;/&gt;
&lt;p&gt;
Here we can clearly see again that most of the file&amp;#39;s contents seems to fall in the
ASCII range, with concentrations of space characters, and other characters in
the &lt;code class=&#34;verbatim&#34;&gt;[A-z]&lt;/code&gt; range, plus some occurrences of punctuation.
&lt;/p&gt;
&lt;h1 id=&#34;headline-7&#34;&gt;
More Interesting Examples
&lt;/h1&gt;
&lt;p&gt;
More interesting examples of this type of visualization are possible when
looking at more complex files. Below we show a few of these.
&lt;/p&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
Executable Code and Libraries
&lt;/h2&gt;
&lt;p&gt;
The plots below show the structure of (Darwin) executable and library files.
&lt;/p&gt;
&lt;div class=&#34;src src-r&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt; binViz2d(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emacsclient&amp;#34;&lt;/span&gt;, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
 binViz2d(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;libasan.4.dylib&amp;#34;&lt;/span&gt;, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;)
 binViz2d(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;libR.dylib&amp;#34;&lt;/span&gt;, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;https://martin.varela.fi/img/binViz/plot___emacsclient.png&#34; alt=&#34;/img/binViz/plot___emacsclient.png&#34; title=&#34;/img/binViz/plot___emacsclient.png&#34; width=&#34;1200&#34;/&gt;
&lt;img src=&#34;https://martin.varela.fi/img/binViz/plot___libR:dylib.png&#34; alt=&#34;/img/binViz/plot___libR:dylib.png&#34; title=&#34;/img/binViz/plot___libR:dylib.png&#34; width=&#34;1200&#34;/&gt;
&lt;img src=&#34;https://martin.varela.fi/img/binViz/plot___libasan:4:dylib.png&#34; alt=&#34;/img/binViz/plot___libasan:4:dylib.png&#34; title=&#34;/img/binViz/plot___libasan:4:dylib.png&#34; width=&#34;1200&#34;/&gt;
&lt;p&gt;
We can see that these files have more structure to them, and exhibit some common
patterns, such as much higher frequencies for low values and values
corresponding to upper-case ASCII characters, as well as a significant amount of
points in the &lt;code class=&#34;verbatim&#34;&gt;[a-z]&lt;/code&gt; range, as well. Looking at the strings in those binaries,
we can find very many upper-case constant names, along with e.g., error
messages, which help explain the observed value distribution.
&lt;/p&gt;
&lt;p&gt;
For a different perspective, we can look at the polar projection of one of these
plots.
&lt;/p&gt;
&lt;div class=&#34;src src-r&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt; binViz2d(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;libR.dylib&amp;#34;&lt;/span&gt;, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, polar&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;https://martin.varela.fi/img/binViz/plot_polar__libR:dylib.png&#34; alt=&#34;/img/binViz/plot_polar__libR:dylib.png&#34; title=&#34;/img/binViz/plot_polar__libR:dylib.png&#34; width=&#34;1200&#34;/&gt;
&lt;p&gt;
We can also look at a faceted version of a plot, looking at how the trigrams
change throughout the file.
&lt;/p&gt;
&lt;div class=&#34;src src-r&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(p,d) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;lt;-%&lt;/span&gt; binViz2d(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emacsclient&amp;#34;&lt;/span&gt;, save&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)
lp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; facet_wrap(&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;cut&lt;/span&gt;(idx, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;))
ggsave(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emacsclient_faceted_idx.png&amp;#34;&lt;/span&gt;, width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, units &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cm&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;https://martin.varela.fi/img/binViz/emacsclient_faceted_idx.png&#34; alt=&#34;/img/binViz/emacsclient_faceted_idx.png&#34; title=&#34;/img/binViz/emacsclient_faceted_idx.png&#34; width=&#34;1200&#34;/&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
PDF Content
&lt;/h2&gt;
&lt;p&gt;
PDF files show very distinctive properties as well. Here we look at a
scientific paper and a programming book. 
&lt;/p&gt;
&lt;div class=&#34;src src-r&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt; binViz2d(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tommSurvey.pdf&amp;#34;&lt;/span&gt;, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;)
 binViz2d(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cookbook.pdf&amp;#34;&lt;/span&gt;, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;https://martin.varela.fi/img/binViz/plot___tommSurvey:pdf.png&#34; alt=&#34;/img/binViz/plot___tommSurvey:pdf.png&#34; title=&#34;/img/binViz/plot___tommSurvey:pdf.png&#34; width=&#34;1200&#34;/&gt;
&lt;img src=&#34;https://martin.varela.fi/img/binViz/plot___cookbook:pdf.png&#34; alt=&#34;/img/binViz/plot___cookbook:pdf.png&#34; title=&#34;/img/binViz/plot___cookbook:pdf.png&#34; width=&#34;1200&#34;/&gt;
&lt;p&gt;
We notice that there are quite striking
similarities among the plots. In particular, a set of &amp;#34;lines&amp;#34; appear along the
main diagonal of the plot, and from the (0,0) and (255,255) points towards the
mid-range of each axis. As expected, there&amp;#39;s also a large concentration of
trigrams in the character parts of the ASCII range.
&lt;/p&gt;
&lt;p&gt;
We can look at a faceted view of the plot to see if the distribution changes
either on the index or the values observed.
&lt;/p&gt;
&lt;div class=&#34;src src-r&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;(p,d) &lt;span style=&#34;color:#f92672&#34;&gt;%&amp;lt;-%&lt;/span&gt; binViz2d(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tommSurvey.pdf&amp;#34;&lt;/span&gt;, save&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FALSE&lt;/span&gt;)
lp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; facet_wrap(&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;cut&lt;/span&gt;(z, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;))
ggsave(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tommSurvey_faceted_value.png&amp;#34;&lt;/span&gt;, width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, units &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cm&amp;#34;&lt;/span&gt;)
ip &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; facet_wrap(&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;cut&lt;/span&gt;(idx, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;))
ggsave(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tommSurvey_faceted_idx.png&amp;#34;&lt;/span&gt;, width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, units &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cm&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img src=&#34;https://martin.varela.fi/img/binViz/tommSurvey_faceted_idx.png&#34; alt=&#34;/img/binViz/tommSurvey_faceted_idx.png&#34; title=&#34;/img/binViz/tommSurvey_faceted_idx.png&#34; width=&#34;1200&#34;/&gt;
&lt;p&gt;
When looking at how the line structure is noticeable throughout the file, we can see
that there are portions of the file in which it vanishes, whereas in others it
(or a part of it) becomes more prominent. 
&lt;/p&gt;
&lt;p&gt;
Looking at the values below, however, shows that a) all the range of values is
nearly uniformly represented throughout the file, and b) the main diagonal line structure is
noticeable for all the value ranges, but the secondary ones are visible only in
certain value ranges. Finding out the actual meaning of this would probably be a
non-trivial task, left as an exercise to the reader ;).
&lt;/p&gt;
&lt;img src=&#34;https://martin.varela.fi/img/binViz/tommSurvey_faceted_value.png&#34; alt=&#34;/img/binViz/tommSurvey_faceted_value.png&#34; title=&#34;/img/binViz/tommSurvey_faceted_value.png&#34; width=&#34;1200&#34;/&gt;
&lt;h2 id=&#34;headline-10&#34;&gt;
Audio
&lt;/h2&gt;
&lt;p&gt;
When looking at media files, which tend to be large, it is good to try sampling
the content, in order to reduce the time (and memory) required for creating the
visualizations. We will look at a music clip, uncompressed, and then encoded as
MP3 and FLAC.
&lt;/p&gt;
&lt;div class=&#34;src src-r&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt; binViz2d(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test_File_2_0_STEREO_PCM.wav&amp;#34;&lt;/span&gt;, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,
                                          sample &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, sample_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;400000&lt;/span&gt;)
 binViz2d(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test_File_2_0_STEREO_MP3.mp3&amp;#34;&lt;/span&gt;, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,
                                          sample &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, sample_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;400000&lt;/span&gt;)
 binViz2d(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test_File_2_0_STEREO_FLAC.flac&amp;#34;&lt;/span&gt;, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, 
                                          sample &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRUE&lt;/span&gt;, sample_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;400000&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We note that the relative resolution of each plot will be different, as we are
sampling the same amount of data out of files of very different size. In the
case of the uncompressed audio, the sample is less than 1% of the total file,
whereas for the FLAC it&amp;#39;s a bit under 5 percent, and for the MP3 version it is
almost 20 percent. Still, the patterns observed in the plots are quite constant,
even varying the sampling size between 25% and 500% of the value chosen here.
&lt;/p&gt;
&lt;img src=&#34;https://martin.varela.fi/img/binViz/plot__sampled_4e+05_Test_File_2_0_STEREO_PCM:wav.png&#34; alt=&#34;/img/binViz/plot__sampled_4e+05_Test_File_2_0_STEREO_PCM:wav.png&#34; title=&#34;/img/binViz/plot__sampled_4e+05_Test_File_2_0_STEREO_PCM:wav.png&#34; width=&#34;1200&#34;/&gt;
&lt;img src=&#34;https://martin.varela.fi/img/binViz/plot__sampled_4e+05_Test_File_2_0_STEREO_FLAC:flac.png&#34; alt=&#34;/img/binViz/plot__sampled_4e+05_Test_File_2_0_STEREO_FLAC:flac.png&#34; title=&#34;/img/binViz/plot__sampled_4e+05_Test_File_2_0_STEREO_FLAC:flac.png&#34; width=&#34;1200&#34;/&gt;
&lt;img src=&#34;https://martin.varela.fi/img/binViz/plot__sampled_4e+05_Test_File_2_0_STEREO_MP3:mp3.png&#34; alt=&#34;/img/binViz/plot__sampled_4e+05_Test_File_2_0_STEREO_MP3:mp3.png&#34; title=&#34;/img/binViz/plot__sampled_4e+05_Test_File_2_0_STEREO_MP3:mp3.png&#34; width=&#34;1200&#34;/&gt;
&lt;p&gt;
It&amp;#39;s interesting to note that while the uncompressed file has a very clear
structure, the compressed versions seem almost random. This pattern is also
visible for compressed images, and of course, for encrypted files. Between the
compressed versions, it seems like the FLAC-encoded one shows less structure
than the MP3-encoded one, where some patches of the space are denser. I suspect
that this is probably related to the lossy nature of MP3 encoding, but haven&amp;#39;t
yet delved into it.
&lt;/p&gt;
&lt;h1 id=&#34;headline-11&#34;&gt;
Conclusions
&lt;/h1&gt;
&lt;p&gt;
I hope you have found this post interesting, and maybe caught an idea or two
about how this type of approach could be useful, and more importantly, how a
simple visualization technique can yield interesting plots that reveal &amp;#34;hidden&amp;#34;
structure in data. 
&lt;/p&gt;
&lt;p&gt;
The code used to generate the plots can be found in the gist below, and it&amp;#39;s
free to be used.
&amp;lt;script src=&amp;#34;&lt;a href=&#34;https://gist.github.com/mvarela/e3b868fe36d232a39bf5d87796c8ac28.js&#34;&gt;https://gist.github.com/mvarela/e3b868fe36d232a39bf5d87796c8ac28.js&lt;/a&gt;&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>No Silver Bullet: QoE Metrics, QoE Fairness, and User Diversity in the Context of QoE Management</title>
      <link>https://martin.varela.fi/publication/varela-qomex17/</link>
      <pubDate>Wed, 03 May 2017 06:40:43 +0300</pubDate>
      
      <guid>https://martin.varela.fi/publication/varela-qomex17/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
