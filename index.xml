<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Martín Varela on Martín Varela</title>
    <link>https://martin.varela.fi/</link>
    <description>Recent content in Martín Varela on Martín Varela</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Martín Varela 2017-</copyright>
    <lastBuildDate>Sat, 28 Mar 2020 18:22:44 +0300</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>From QoS Distributions to QoE Distributions: a System&#39;s Perspective</title>
      <link>https://martin.varela.fi/publication/varela-qoe-management20/</link>
      <pubDate>Sat, 28 Mar 2020 18:22:44 +0300</pubDate>
      
      <guid>https://martin.varela.fi/publication/varela-qoe-management20/</guid>
      <description></description>
    </item>
    
    <item>
      <title>String Similarity Made Easy</title>
      <link>https://martin.varela.fi/2019/12/02/string-similarity-made-easy/</link>
      <pubDate>Mon, 02 Dec 2019 21:01:22 +0200</pubDate>
      
      <guid>https://martin.varela.fi/2019/12/02/string-similarity-made-easy/</guid>
      <description>&lt;!-- -*- org-export-babel-evaluate: nil -*- --&gt;

&lt;h1 id=&#34;the-setting&#34;&gt;The setting&lt;/h1&gt;

&lt;p&gt;For a few years now I&#39;ve had an itch to scratch, namely, finding a nice way of
  keeping a normalized bibliographic database to use with LaTeX &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ctan.org/pkg/bibtex&#34; title=&#34;BibTeX&#34; target=&#34;_blank&#34;&gt;BibTeX&lt;/a&gt; unfortunately lends itself to a lot of variability in how entries are
  stored, and in my experience, it&#39;s always been slightly painful to work with,
  especially when collaborating with other authors. Very often entries are
  incomplete, or repeated under different keys, or use inconsistent formatting
  (e.g., in how author names are handled, or titles capitalized).&lt;/p&gt;

&lt;p&gt;I&#39;ve been thinking a bit about how to lower the friction of dealing with these
  issues (and also finding a practical motivation to get some extra-curricular
  coding done), and part of the solution I have in mind is &lt;a href=&#34;https://github.com/mvarela/clj-bibtex&#34; title=&#34;clj-bibtex&#34; target=&#34;_blank&#34;&gt;clj-bibtex&lt;/a&gt;, a small
  library for operating on BibTeX data.&lt;/p&gt;

&lt;p&gt;Basically, the use case I have in mind for this is to load up a bunch of
  bibliography data, do some basic normalization on it (in particular author
  names), and load it into a &lt;a href=&#34;https://github.com/tonsky/datascript&#34; title=&#34;Datascript&#34; target=&#34;_blank&#34;&gt;Datascript&lt;/a&gt; DB, where I can easily query the data.&lt;/p&gt;

&lt;p&gt;It is often the case that author names in BibTeX entries are misspelled, or
  that a &lt;em&gt;&#34;Last, F.&#34;&lt;/em&gt; format is used instead of &lt;em&gt;&#34;Last, First&#34;&lt;/em&gt;, etc. I would like
  to quickly identify these cases, and later be able to merge those entities (in
  the DB) so that a canonical name is available for each author. Likewise, it is
  common for duplicate entries to find their way into &lt;code&gt;.bib&lt;/code&gt; files, with
  different keys and small differences in the title fields (different
  capitalization styles is a typical issue).&lt;/p&gt;

&lt;p&gt;In order to solve these two issues, I had to look at string similarity
  metrics.&lt;/p&gt;

&lt;h1 id=&#34;the-problem&#34;&gt;The problem&lt;/h1&gt;

&lt;p&gt;What I needed to do then is find a way, given two strings, to see how similar
  they are. This is a problem that has been solved many times over, so I was not
  about to invent a new similarity metric, but rather find one that worked well
  in this particular context, and was simple (and preferably easy!) to implement.&lt;/p&gt;

&lt;p&gt;The canonical string similarity (or distance) metric is the
  &lt;a href=&#34;https://en.wikipedia.org/wiki/Levenshtein_distance&#34; title=&#34;Levenshtein distance&#34; target=&#34;_blank&#34;&gt;Levenshtein distance&lt;/a&gt;, which is a so-called &lt;em&gt;edit distance&lt;/em&gt; metric. Quoting the
  wiki, this metric is&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&#34;the minimum number of single-character edits (insertions, deletions or substitutions) required to change one word into the other.&#34;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are a number of other &lt;em&gt;edit distance&lt;/em&gt; metrics, which allow different
  operations to be considered, and hence work better or worse for different use
  cases. For this use case, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance&#34; title=&#34;Damerau-Levenshtein&#34; target=&#34;_blank&#34;&gt;Damerau-Levenshtein&lt;/a&gt; metric could be a better
  fit, since it also allows for letter transposition (which is a common typo).&lt;/p&gt;

&lt;p&gt;Upon closer inspection, I noticed that none of these algorithms lent itself to
  a nice, efficient and TCO-friendly implementation. They can of course be
  implemented with &lt;code&gt;loop&lt;/code&gt; or as a reduction, carrying a rather large
  accumulator, but I was feeling a bit lazy, and I suspected the end result
  would not be very nice to look at, so I decided to look around a bit
  more. A few more minutes of googling brought me to the
  &lt;a href=&#34;https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient&#34; title=&#34;Sørensen-Dice coefficient&#34; target=&#34;_blank&#34;&gt;Sørensen-Dice coefficient&lt;/a&gt;, which is, per the wiki:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&#34;a statistic used to gauge the similarity of two samples&#34;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;and is defined as, given two sets $X$ and $Y$&lt;/p&gt;

&lt;p&gt;$$ SDC = \frac{2\vert X \cap Y \vert}{\vert X \vert + \vert Y \vert} $$&lt;/p&gt;

&lt;h1 id=&#34;the-solution&#34;&gt;The solution&lt;/h1&gt;

&lt;p&gt;In order to make this work for strings, we need to somehow tokenize them.
  Using single letters, or words, is unlikely to yield the results we want, but
  if we consider &lt;em&gt;digrams&lt;/em&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, it produces very good results for the problem we are
  trying to solve. As a bonus, the implementation is trivial.&lt;/p&gt;

&lt;p&gt;First, we need to turn our strings into a set of digrams:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;  (require &#39;[net.cgrand.xforms :as x])

  (defn digrams
    &amp;quot;Creates a set of all digrams in `s`&amp;quot;
    [s]
    (let [xform (comp
                 (x/partition 2 1)
                 (map #(apply str %)))]
       (into #{} xform s)))


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, we can simply use the resulting sets in the definition of the
  Sørensen-Dice coefficient (noting that it&#39;s undefined if both strings are
  empty, and that when either string is of length 1, the coefficient will either
  be 0, if the strings are different, or 1)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;  (require &#39;[clojure.set :as set])

  (defn sorensen-dice
      &amp;quot;Computes the Sørenson-Dice coefficient between `s1` and `s2`.
      At least one of the arguments must have length &amp;gt; 0.&amp;quot;
    [s1 s2]
    {:pre [(or (&amp;gt; (count s1) 0)
               (&amp;gt; (count s2) 0))]}
    (if (or (= 1 (count s1))
            (= 1 (count s2)))
      (if (= s1 s2) 1.0 0.0)
      (let [b1 (digrams s1)
            b2 (digrams s2)]
        (/ (* 2.0 (count (set/intersection b1 b2)))
           (+ (count b1) (count b2))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can put this to use on &lt;a href=&#34;https://github.com/mvarela/clj-bibtex/blob/master/resources/samples/literature.bib&#34; title=&#34;an actual &amp;lt;code&amp;gt;.bib&amp;lt;/code&amp;gt; file&#34; target=&#34;_blank&#34;&gt;an actual &lt;code&gt;.bib&lt;/code&gt; file&lt;/a&gt; that has some of the
aforementioned problems. Assuming we have all the author names and all the paper
titles in &lt;code&gt;all-authors&lt;/code&gt; and &lt;code&gt;all-titles&lt;/code&gt;, respectively:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;  (defn find-similar [coll]
    (let [ xform (comp
                  (x/sort)
                  (x/partition 2 1)
                  (map (fn[[s1 s2]] [s1 s2 (sorensen-dice s1 s2)]))
                  (filter (fn[[_ _ sd]] (&amp;gt; sd 0.7))))]
      (into [] xform coll)))

  (find-similar all-authors)
  ;;=&amp;gt;
  ;;[[&amp;quot;Agapiou, G.&amp;quot; &amp;quot;Agapiou, S.&amp;quot; 0.8]
  ;; [&amp;quot;Alcaraz-Calero, J. M.&amp;quot; &amp;quot;Alcaraz-Calero, Jose M&amp;quot; 0.8292682926829268]
  ;; [&amp;quot;Awobuluyi, O.&amp;quot; &amp;quot;Awobuluyi, Olatunde&amp;quot; 0.7333333333333333]
  ;; [&amp;quot;Chen, Zhan&amp;quot; &amp;quot;Chen, Zhibo&amp;quot; 0.7368421052631579]
  ;; [&amp;quot;Ghinea, George&amp;quot; &amp;quot;Ghinea, Gheorghita&amp;quot; 0.7857142857142857]
  ;; [&amp;quot;Gong, Yan&amp;quot; &amp;quot;Gong, Yi&amp;quot; 0.8]
  ;; [&amp;quot;Guyard, Frederic&amp;quot; &amp;quot;Guyard, Frédéric&amp;quot; 0.7333333333333333]
  ;; [&amp;quot;Heegaard, P. E.&amp;quot; &amp;quot;Heegaard, Poul&amp;quot; 0.7407407407407407]
  ;; [&amp;quot;Heegaard, Poul&amp;quot; &amp;quot;Heegaard, Poul E&amp;quot; 0.9285714285714286]
  ;; [&amp;quot;Heegaard, Poul E&amp;quot; &amp;quot;Heegaard, Poul E.&amp;quot; 0.967741935483871]
  ;; [&amp;quot;Hoßfeld, T.&amp;quot; &amp;quot;Hoßfeld, Tobias&amp;quot; 0.75]
  ;; [&amp;quot;Kara, Peter A&amp;quot; &amp;quot;Kara, Peter A.&amp;quot; 0.96]
  ;; [&amp;quot;Liu, Xi&amp;quot; &amp;quot;Liu, Xin&amp;quot; 0.9230769230769231]
  ;; [&amp;quot;Martini, Maria G&amp;quot; &amp;quot;Martini, Maria G.&amp;quot; 0.9629629629629629]
  ;; [&amp;quot;Metzger, F.&amp;quot; &amp;quot;Metzger, Florian&amp;quot; 0.72]
  ;; [&amp;quot;Nightingale, Edmund B&amp;quot; &amp;quot;Nightingale, J.&amp;quot; 0.7058823529411765]
  ;; [&amp;quot;Nightingale, J.&amp;quot; &amp;quot;Nightingale, James&amp;quot; 0.8387096774193549]
  ;; [&amp;quot;Schatz, R&amp;quot; &amp;quot;Schatz, Raimund&amp;quot; 0.7272727272727273]
  ;; [&amp;quot;Schatz, Raimund&amp;quot; &amp;quot;Schatz, Raimund.&amp;quot; 0.9655172413793104]
  ;; [&amp;quot;Shafiq, M. Zubair&amp;quot; &amp;quot;Shafiq, Muhammad Zubair&amp;quot; 0.7567567567567568]
  ;; [&amp;quot;Skorin-Kapov, L.&amp;quot; &amp;quot;Skorin-Kapov, Lea&amp;quot; 0.9032258064516129]
  ;; [&amp;quot;Varela, M.&amp;quot; &amp;quot;Varela, Martin&amp;quot; 0.7619047619047619]
  ;; [&amp;quot;Varela, Martin&amp;quot; &amp;quot;Varela, Martn&amp;quot; 0.8695652173913043]
  ;; [&amp;quot;Wang, Ning&amp;quot; &amp;quot;Wang, Ping&amp;quot; 0.75]
  ;; [&amp;quot;Wang, Q.&amp;quot; &amp;quot;Wang, Qi&amp;quot; 0.8571428571428571]
  ;; [&amp;quot;Yang, Zhe&amp;quot; &amp;quot;Yang, Zhen&amp;quot; 0.9411764705882353]
  ;; [&amp;quot;Zhang, Lin&amp;quot; &amp;quot;Zhang, Ping&amp;quot; 0.7777777777777778]]

  (find-similar all-titles)
  ;;=&amp;gt;
  ;;[[&amp;quot;Adaptive psychometric scaling for video quality assessment&amp;quot;
  ;;  &amp;quot;Adaptive testing for video quality assessment&amp;quot;
  ;;  0.8085106382978723]
  ;; [&amp;quot;OTT-ISP Joint Service Management: A Customer Lifetime Value Based Approach&amp;quot;
  ;;  &amp;quot;OTT-ISP Joint service management: a customer lifetime value based approach&amp;quot;
  ;;  0.7786259541984732]
  ;; [&amp;quot;OTT-ISP Joint service management: a customer lifetime value based approach&amp;quot;
  ;;  &amp;quot;OTT-ISP joint service management: a Customer Lifetime Value based approach &amp;quot;
  ;;  0.8702290076335878]
  ;; [&amp;quot;Understanding the impact of network dynamics on mobile video user engagement&amp;quot;
  ;;  &amp;quot;Understanding the impact of video quality on user engagement&amp;quot;
  ;;  0.743801652892562]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though there are some false positives, it does seem to capture the
problematic fields pretty well. Actually, we can play a bit with the threshold,
since based on my testing so far, titles and authors could use different
thresholds, so the actual functions in &lt;code&gt;clj-bibtex&lt;/code&gt; that take care of this take
an optional fuzziness argument.&lt;/p&gt;

&lt;h1 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h1&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;I am aware of Zotero, and other similar tools, but they never seem to stick, for some reason, and they definitely don&#39;t satisfy my NIH syndrome. I should try it again, though... &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li id=&#34;fn:2&#34;&gt;This is the standard way to implement Sørensen-Dice for string similarity, by the way.  &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>WebGL, React, and no JavaScript</title>
      <link>https://martin.varela.fi/2019/11/01/webgl-react-and-no-javascript/</link>
      <pubDate>Fri, 01 Nov 2019 22:18:23 +0200</pubDate>
      
      <guid>https://martin.varela.fi/2019/11/01/webgl-react-and-no-javascript/</guid>
      <description>&lt;!-- -*- org-export-babel-evaluate: nil -*- --&gt;

&lt;h1 id=&#34;web-dev-me-a-non-story&#34;&gt;Web-dev &amp; Me: a non-story&lt;/h1&gt;

&lt;p&gt;As much as I enjoy programming, and also spending (arguably too much) time on
  the web, I&#39;ve never really got into web development. I think part of the
  reason is that I associate it with JavaScript, which I just can&#39;t force myself
  to like, and all its associated tooling, which is monstrously complex.&lt;/p&gt;

&lt;p&gt;So, except for tiny bits of js (typically some jQuery thing, and a couple of
  Rails apps done for some &lt;a href=&#34;https://martin.varela.fi/publication/varela-qomex13-2/&#34; title=&#34;subjective&#34; target=&#34;_blank&#34;&gt;subjective&lt;/a&gt; test campaigns for &lt;a href=&#34;https://martin.varela.fi/publication/varela-qomex2015-1/&#34; title=&#34;web QoE&#34; target=&#34;_blank&#34;&gt;web QoE&lt;/a&gt; a few years
  back) here and there, I&#39;ve mostly stayed away from web applications.&lt;/p&gt;

&lt;p&gt;A few weeks ago, however, I needed to prototype some audio analysis stuff for
  work, and being that I work with WebRTC, the analysis needed to be done in the
  browser. So I finally had a compelling reason to properly use some
  &lt;a href=&#34;https://clojurescript.org/&#34; title=&#34;Clojurescript&#34; target=&#34;_blank&#34;&gt;Clojurescript&lt;/a&gt;, and learn a bit about &lt;a href=&#34;https://reagent-project.github.io/&#34; title=&#34;Reagent&#34; target=&#34;_blank&#34;&gt;Reagent&lt;/a&gt; and &lt;a href=&#34;https://github.com/Day8/re-frame&#34; title=&#34;re-frame&#34; target=&#34;_blank&#34;&gt;re-frame&lt;/a&gt;, which I&#39;d been
  meaning to look into for a while.&lt;/p&gt;

&lt;p&gt;Long story short, I found the re-frame approach conceptually very nice, and
  quite simple to pick up. The prototype for work, which had started as a couple
  of simple reagent components was a suitable case study for a few hours over
  the weekend, and all was well... Except now I&#39;d been bitten by the web bug.&lt;/p&gt;

&lt;p&gt;Browsing around on YouTube, I came across &lt;a href=&#34;https://youtu.be/myigRnZHhTw&#34; title=&#34;this cool talk&#34; target=&#34;_blank&#34;&gt;this cool talk&lt;/a&gt; by Douglas Hamilton,
  showcasing his &lt;a href=&#34;https://github.com/DougHamil/threeagent&#34; title=&#34;threeagent&#34; target=&#34;_blank&#34;&gt;threeagent&lt;/a&gt; project, which provides a reagent-like API wrapper
  for &lt;a href=&#34;https://threejs.org/&#34; title=&#34;three.js&#34; target=&#34;_blank&#34;&gt;three.js&lt;/a&gt;. So, we can use the same approach for the &#34;web page&#34; parts, and the
  3D ones, which is super neat.&lt;/p&gt;

&lt;p&gt;Since I&#39;m not a gifted 3D designer, I chose to do a toy project that&#39;s almost,
  but not quite 2d: a clock.&lt;/p&gt;

&lt;p&gt;&lt;div id=&#34;app&#34;&gt;&lt;/div&gt;
    &lt;canvas id=&#34;root&#34; style=&#34;width:100%;height:100%&#34;&gt;&lt;/canvas&gt;
    &lt;script src=&#34;https://martin.varela.fi/app-js/app.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Voilà, the unnecessarily-3d clock! It&#39;s built in parts: there&#39;s the face, the
 hands, the little knob in the middle, and the ticks on the face. Each of those
 components is based on a few three.js primitives provided by threeagent. So the
 ticks are built like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;  (defn ticks [props-in radius length pos-z]
    (let [props (merge {:color &amp;quot;black&amp;quot;
                        :opacity 0.8
                        :transparent true} props-in)
          positions (mapv (fn[i]
                            (let [angle (subs/hand-angle (* 5 i))
                                  pos-x (* radius (js/Math.cos angle))
                                  pos-y (* radius (js/Math.sin angle))]
                              [:box {:position [pos-x pos-y pos-z]
                                     :rotation [0 0 (+ (/ js/Math.PI 2) angle)]
                                     :width 0.2
                                     :depth 0.1
                                     :height length
                                     :material props}]))
                          (range 12))]
      `[:object
       ~@positions]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The hours and minutes hands are handled by this function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn hand [material-props unit-key length]
  (let [props (merge {:color &amp;quot;black&amp;quot;
                      :opacity 0.8
                      :transparent true} material-props)
        units (re-frame/subscribe [unit-key])
        angle (subs/hand-angle @units)
        [pos-x pos-y] (subs/hand-offsets length angle)]
        [:object {:position [pos-x pos-y]
                  :rotation [0 0 angle]}
         [:box {:position [0 0 -10.5]
                :width 0.4
                :height length
                :depth 0.1
                :material props}]]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can manage the state of the 3D bits in the same way (re-frame&#39;s &lt;code&gt;app-db&lt;/code&gt;) as
we manage the state of the app itself. This is pretty cool! The full source is
up &lt;a href=&#34;https://github.com/mvarela/unnecessarily-3d-clock&#34; title=&#34;on GitHub&#34; target=&#34;_blank&#34;&gt;on GitHub&lt;/a&gt;, if you&#39;re curious.&lt;/p&gt;

&lt;h2 id=&#34;some-re-frame-bits-the-30-000ft-view&#34;&gt;Some re-frame bits (the 30,000ft. view)&lt;/h2&gt;

&lt;p&gt;Re-frame brings order into the app, allowing us to cleanly separate the state
 (which is centralized in the &lt;code&gt;app-db&lt;/code&gt;), the views (which are along the lines of
 the code above), and events, which make things happen. Events are triggered (in
 this toy example, there&#39;s only one event type, and it&#39;s triggered by a timer),
 and are handled by &lt;em&gt;pure&lt;/em&gt; functions (&lt;em&gt;event-handlers&lt;/em&gt;), usually changing the
 state of the application. If side-effects are needed (e.g., either as a result
 of the event, or as in input to the event handler), they are handled separately,
 via &lt;em&gt;effects&lt;/em&gt; and &lt;em&gt;coeffects&lt;/em&gt;, respectively. This sounds a bit overly
 complicated, but keeping the event handlers pure does make it easier to reason
 about and test the application. In order to update the UI, the views
 &lt;em&gt;subscribe&lt;/em&gt; to bits of the app state (or values derived from them, via
 so-called &lt;em&gt;reactive subscriptions&lt;/em&gt;). When those are updated by an event
 handler, the views are re-rendered as needed.&lt;/p&gt;

&lt;p&gt;So basically, the different concerns in the app are neatly separated, and there
 is a clear way in which information flows: components can trigger events, which
 affect the state of the application (and potentially also trigger further events),
 and that state is propagated, via subscriptions, to the components, which can
 then update themselves.&lt;/p&gt;

&lt;p&gt;If you haven&#39;t looked into re-frame before, you can have a go at &lt;a href=&#34;https://github.com/day8/re-frame/blob/master/docs/README.md&#34; title=&#34;its docs&#34; target=&#34;_blank&#34;&gt;its docs&lt;/a&gt;,
 there&#39;s a lot of info to get started there.&lt;/p&gt;

&lt;h2 id=&#34;interactive-development&#34;&gt;Interactive development&lt;/h2&gt;

&lt;p&gt;A nice thing about Clojurescript is that it has good tooling for live coding.
 Besides the REPL, you can get live hot reloading of your app, while maintaining
 application state. For this, I used Thomas Heller&#39;s &lt;a href=&#34;https://shadow-cljs.org/&#34; title=&#34;shadow-cljs&#34; target=&#34;_blank&#34;&gt;shadow-cljs&lt;/a&gt;, which handles
 this neatly (as well as the rest of the build process, and provides easy
 integration with the node.js ecosystem).&lt;/p&gt;

&lt;p&gt;This is particularly handy when developing the views, as you can simply save
 the file and the app will be reloaded automatically, so your changes are
 immediately visible.&lt;/p&gt;

&lt;p&gt;It&#39;s nice to have the same type of workflow as when working on Clojure, it
 greatly helps boost your productivity.&lt;/p&gt;

&lt;p&gt;&lt;video width=&#34;100%&#34; autoplay loop controls&gt; 
&lt;source src=&#34;https://martin.varela.fi/video/shadow-reload.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Coming Full Circle</title>
      <link>https://martin.varela.fi/2019/04/23/coming-full-circle/</link>
      <pubDate>Tue, 23 Apr 2019 22:48:23 +0300</pubDate>
      
      <guid>https://martin.varela.fi/2019/04/23/coming-full-circle/</guid>
      <description>&lt;!-- -*- org-export-babel-evaluate: nil -*- --&gt;

&lt;h1 id=&#34;in-the-beginning&#34;&gt;In the Beginning...&lt;/h1&gt;

&lt;p&gt;QoE sits at a confluence point between several disciplines, and one of those
  is QoS. Back when I started working on these topics, &#34;QoE&#34; was not a thing, we
  (networking people) would talk about &#34;QoS from the user&#39;s perspective&#34;, or
  similar kludgy terms, for lack of a proper one. The underlying concept,
  however, was clear: how does QoS in the network affect the user&#39;s perception
  of media quality.&lt;/p&gt;

&lt;p&gt;Back then, media quality had an implicit narrower meaning, too. VoIP was a new
  thing, and doing real-time video was mostly a research topic. Times change,
  technology advances, and QoE has taken a life of its own, evolving into a
  wider, much more inclusive concept spanning a much wider range of application
  domains.&lt;/p&gt;

&lt;p&gt;For some applications of QoE, however, the link to QoS, and more generally,
  performance, remains strong. In particular, when dealing with monitoring and
  management, we are most often interested in understanding how the performance
  of the network and other resources affect the users&#39; QoE.&lt;/p&gt;

&lt;p&gt;We typically see QoS as a lower-level construct, which in practice provides
  one of the foundations of QoE; hence the plethora of so-called QoS to QoE
  models in the literature. These map stuff we can measure (e.g., network QoS),
  and stuff we know (encoding parameters, buffer sizes, etc.) into an
  approximation of how an ideal, average user (or if we did our homework and put
  some effort, a population of users) might experience the quality of a given
  service. It seems clear that, in a sense, QoE sits atop QoS, but is it really
  so?&lt;/p&gt;

&lt;h1 id=&#34;a-different-perspective&#34;&gt;A Different Perspective&lt;/h1&gt;

&lt;p&gt;Over the last few years I have often worked on QoE management ideas, and over
  the past year in particular, I have focused on quality monitoring for WebRTC
  platforms. One common idea that comes up in this context, is that of
  &#34;service-level QoE&#34;, or &#34;the QoE of the system&#34;, or similar terms. Like in the
  old times, we seem to lack a proper term to describe what we are after,
  despite it being a rather intuitive thing.&lt;/p&gt;

&lt;p&gt;On the other hand, based on the definition of QoE, it seems rather absurd to
  speak of &#34;the system&#39;s QoE&#34;, since QoE is all about &lt;em&gt;the user&lt;/em&gt;. A system (or a
  service) cannot experience anything, it has neither expectations, nor an
  emotional state, nor a sensory system, for that matter.&lt;/p&gt;

&lt;p&gt;So when we speak about &#34;service-level QoE&#34;, we are, at best abusing the
  language, or at worst, severely confused about what QoE is. Since most of the
  people I know who work on these topics are pretty knowledgeable about QoE,
  I&#39;ll go with the first explanation. We are abusing the language, because we
  lack a suitable term for what we are working on.&lt;/p&gt;

&lt;p&gt;Let us illustrate this a bit with WebRTC. At &lt;a href=&#34;https://www.callstats.io/&#34; title=&#34;callstats.io&#34; target=&#34;_blank&#34;&gt;callstats.io&lt;/a&gt; we provide a WebRTC
  monitoring service; our users often have several WebRTC applications, and each
  application often sees hundreds, or thousands of calls a day. Calls can have
  many users, and each of those users will experience a certain quality while in
  the call. So far, so good, we have users, and each user&#39;s QoE can be estimated
  to some degree (remember kids, WebRTC is a &lt;em&gt;hard&lt;/em&gt; problem, QoE-wise!).&lt;/p&gt;

&lt;p&gt;But our goal is to provide a &lt;em&gt;call QoE&lt;/em&gt; value, and furthermore, an
  &lt;em&gt;application QoE&lt;/em&gt; value to our users (who are not the actual users on the
  call, but the service providers). While the terms themselves are rather
  nonsensical when going by the &lt;a href=&#34;http://www.qualinet.eu/images/stories/QoE_whitepaper_v1.2.pdf&#34; title=&#34;QoE definition&#34; target=&#34;_blank&#34;&gt;QoE definition&lt;/a&gt;, their intent seems quite clear:
  we want to know if a call was good or bad for the users, and we want to know
  this for all calls across a given WebRTC service, to see if the service itself
  is performing as expected (i.e., providing its users with a good experience!).&lt;/p&gt;

&lt;h2 id=&#34;troubles-ahead&#34;&gt;Troubles ahead&lt;/h2&gt;

&lt;p&gt;This pattern repeats itself in most, if not all of the QoE management
  literature, where the goal is to understand, and improve the performance of a
  service, and said performance is dependent on the quality experienced by
  the service&#39;s users.&lt;/p&gt;

&lt;p&gt;Behind this seemingly innocent idea, there lies a mountain of complications,
  unfortunately. Our understanding of this &#34;Service-level QoE&#34; can take different
  forms, depending on the type of service, our goals, and a host of other
  factors.&lt;/p&gt;

&lt;p&gt;The main idea boils down to figuring out how to create &lt;em&gt;quality aggregates&lt;/em&gt; that
   allow us to build a notion of service quality on top of the individual
  users&#39; QoE. When digging a bit deeper, we soon encounter temporal issues
  (pooling QoE over varying time scales), modeling issues &lt;a href=&#34;https://link.springer.com/article/10.1007/s41233-016-0002-1&#34; title=&#34;(MOS vs.
  quantiles/distributions)&#34; target=&#34;_blank&#34;&gt;(MOS vs.
  quantiles/distributions)&lt;/a&gt;, finding trends in distribution variations, etc.&lt;/p&gt;

&lt;h1 id=&#34;what-s-next&#34;&gt;What&#39;s next?&lt;/h1&gt;

&lt;p&gt;I suspect (and hope) we will see more work on this topic over the coming
  years, eventually converging towards a proper definition for this idea of
  &lt;em&gt;Quality of Service&lt;/em&gt; (nice term, but too loaded to use, isn&#39;t it?).&lt;/p&gt;

&lt;p&gt;Working on WebRTC has yielded some insight on aggregating quality, but it&#39;s
  not yet mature enough, nor general enough to put it out there as a solution
  candidate for this problem.&lt;/p&gt;

&lt;p&gt;For the time being, &lt;em&gt;service-level QoE aggregates&lt;/em&gt; might be a good first-order
  approximation to putting a name to this idea, though a bit lacking in the
  marketing department.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fundamental Relationships for Deriving QoE in Systems</title>
      <link>https://martin.varela.fi/publication/varela-qomex19/</link>
      <pubDate>Sun, 03 Mar 2019 18:22:44 +0300</pubDate>
      
      <guid>https://martin.varela.fi/publication/varela-qomex19/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Some things we might have missed along the way (keynote speech)</title>
      <link>https://martin.varela.fi/talk/talk-26/</link>
      <pubDate>Mon, 18 Feb 2019 09:00:00 +0100</pubDate>
      
      <guid>https://martin.varela.fi/talk/talk-26/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Interplay between QoE, User Behavior and System Blocking in QoE Management</title>
      <link>https://martin.varela.fi/publication/varela-qoem-2019/</link>
      <pubDate>Mon, 18 Feb 2019 06:40:42 +0300</pubDate>
      
      <guid>https://martin.varela.fi/publication/varela-qoem-2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Example Page</title>
      <link>https://martin.varela.fi/tutorial/example/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 +0300</pubDate>
      
      <guid>https://martin.varela.fi/tutorial/example/</guid>
      <description>

&lt;p&gt;In this tutorial, I&amp;rsquo;ll share my top 10 tips for getting started with Academic:&lt;/p&gt;

&lt;h2 id=&#34;tip-1&#34;&gt;Tip 1&lt;/h2&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;tip-2&#34;&gt;Tip 2&lt;/h2&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Some Observations on Emerging Aspects in QoE Modeling and Their Impact on QoE Management</title>
      <link>https://martin.varela.fi/publication/varela-qoem-2018/</link>
      <pubDate>Sat, 26 May 2018 06:40:42 +0300</pubDate>
      
      <guid>https://martin.varela.fi/publication/varela-qoem-2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Survey of Emerging Concepts and Challenges for QoE Management of Multimedia Services </title>
      <link>https://martin.varela.fi/publication/varela-tomm18/</link>
      <pubDate>Tue, 01 May 2018 06:40:42 +0300</pubDate>
      
      <guid>https://martin.varela.fi/publication/varela-tomm18/</guid>
      <description></description>
    </item>
    
    <item>
      <title>QoE Vadis</title>
      <link>https://martin.varela.fi/publication/varela-dagstuhl-perspectives/</link>
      <pubDate>Tue, 17 Apr 2018 06:40:42 +0300</pubDate>
      
      <guid>https://martin.varela.fi/publication/varela-dagstuhl-perspectives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>What You Pay Is What You Get? — Fundamentals of Charging Internet Services Based on End User Quality of Experience</title>
      <link>https://martin.varela.fi/publication/varela-quex18-2/</link>
      <pubDate>Mon, 09 Apr 2018 06:40:42 +0300</pubDate>
      
      <guid>https://martin.varela.fi/publication/varela-quex18-2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>QoE Analysis of the Setup of Different Internet Services for FIFO Server Systems</title>
      <link>https://martin.varela.fi/publication/varela-mmb18/</link>
      <pubDate>Mon, 26 Feb 2018 06:40:42 +0300</pubDate>
      
      <guid>https://martin.varela.fi/publication/varela-mmb18/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A New QoE Fairness Index for QoE Management</title>
      <link>https://martin.varela.fi/publication/varela-quex18/</link>
      <pubDate>Fri, 09 Feb 2018 06:40:42 +0300</pubDate>
      
      <guid>https://martin.varela.fi/publication/varela-quex18/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Fractals — Complexity from Simplicity — Part 2</title>
      <link>https://martin.varela.fi/2017/10/02/fractals-complexity-from-simplicity-part-2/</link>
      <pubDate>Mon, 02 Oct 2017 19:23:43 +0300</pubDate>
      
      <guid>https://martin.varela.fi/2017/10/02/fractals-complexity-from-simplicity-part-2/</guid>
      <description>&lt;!-- -*- org-export-babel-evaluate: nil -*- --&gt;

&lt;h1 id=&#34;beyond-l-systems&#34;&gt;Beyond L-Systems&lt;/h1&gt;

&lt;p&gt;In the &lt;a href=&#34;http://martin.varela.fi/post/fractals-complexity-from-simplicity/&#34; title=&#34;first part of this post&#34; target=&#34;_blank&#34;&gt;first part of this post&lt;/a&gt;, we went over Lindenmayer systems, and saw how
from small sets of very simple rules, complexity emerged in the form of
intricate patterns. In this part, we will look at two other types of fractals.
The first one, is called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Barnsley_fern&#34; title=&#34;Barnsley fern&#34; target=&#34;_blank&#34;&gt;Barnsley fern&lt;/a&gt;, and unlike the L-systems in the
previous post, it is based not on string substitution, but on the repeated
iteration of affine transformations to a starting point. The second fractal
we&#39;ll cover in this post is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Mandelbrot_set&#34; title=&#34;Mandelbrot set&#34; target=&#34;_blank&#34;&gt;Mandelbrot set&lt;/a&gt;, which may well be the &#34;most
famous&#34; fractal out there, and for good reason, as it it really fascinating.&lt;/p&gt;

&lt;h1 id=&#34;between-many-ferns&#34;&gt;Between Many Ferns&lt;/h1&gt;

&lt;p&gt;The Barnsley fern is built by applying, in an iterative fashion, a series of
  affine transformations to a point. The transformations are chosen randomly
  between four possible ones, and the probability of choosing each one at each
  iteration is given by a fixed distribution, as follows.&lt;/p&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Transformation&lt;/td&gt;
&lt;td&gt;Probability&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$f1$&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$f2$&lt;/td&gt;
&lt;td&gt;0.85&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$f3$&lt;/td&gt;
&lt;td&gt;0.07&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$f4$&lt;/td&gt;
&lt;td&gt;0.07&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Each transformation has the form $Av^\intercal + w$, where $A$ is a $2\times2$ matrix,
  $v=(x,y)$ is the point being transformed, and $w$ is a constant vector. If $A$ is of
  the form $$ \begin{pmatrix} a&amp;b \\ c&amp;d \end{pmatrix}$$ and $w$ is of the form
  $$ \begin{pmatrix} e \\ f\end{pmatrix}$$ then we have
  $$f(x,y) = \begin{pmatrix} ax + by + e \\ cx + dy + f \end{pmatrix} $$&lt;/p&gt;

&lt;p&gt;The coefficients for the $f1\cdots f4$ transformations are as follows:&lt;/p&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Transforms&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Coeff.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$f1$&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0.16&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$f2$&lt;/td&gt;
&lt;td&gt;0.85&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;-0.04&lt;/td&gt;
&lt;td&gt;0.85&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1.6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$f3$&lt;/td&gt;
&lt;td&gt;0.2&lt;/td&gt;
&lt;td&gt;-0.26&lt;/td&gt;
&lt;td&gt;0.23&lt;/td&gt;
&lt;td&gt;0.22&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1.6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$f4$&lt;/td&gt;
&lt;td&gt;-0.15&lt;/td&gt;
&lt;td&gt;0.28&lt;/td&gt;
&lt;td&gt;0.26&lt;/td&gt;
&lt;td&gt;0.24&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0.44&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We can start putting this to code, by defining the transformations and their
application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns fractals.barnsley
  (:require [fractals.util :as util]    ;; We&#39;ll use a helper to scale the plot to the canvas
            [hiccup.core :as hiccup]))  ;; And hiccup to generate the HTML/SVG

(def transforms {:f1 [0 0 0 0.16 0 0]
                 :f2 [0.85 0.04 -0.04 0.85 0 1.6]
                 :f3 [0.2 -0.26 0.23 0.22 0 1.6]
                 :f4 [-0.15 0.28 0.26 0.24 0 0.44]})


(defn- apply-transform [point coeffs]
  (if (empty? coeffs)
    [0 0]
    (let [[x y] point
          [a b c d e f] coeffs
          xx  (+ (* a x) (* b y) e)
          yy  (+ (* c x) (* d y) f)]
      [xx yy])))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With that done, we can proceed to implement the actual Barnsley fern fractal.
First, we pick the transformations with the given probability distribution&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn- transform-probs [i]
  (cond
    (&amp;lt;= i 0.01) :f1
    (&amp;lt;= i (+ 0.01 0.85)) :f2
    (&amp;lt;= i (+ 0.01 0.85 0.07)) :f3
    :true :f4))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now iterate on our starting point, for however many iterations we want to
do.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn barnsley-fern [num-points]
  (let [probs (repeatedly num-points rand)
        coeflist (map (comp transforms transform-probs) probs)]
    (reductions apply-transform [0 0] coeflist)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically, what we are doing is choosing a sequence of transformations to apply
(randomly, according to the given distribution), and then reducing the actual
transformation, starting on the origin, and keeping all intermediate results.
This gives us a list of points of the form $(f_{i_1}(0,0),f_{i_2}(f_{i_1}(0,0)),
f_{i_3}(f_{i_2}(f_{i_1}(0,0))), \cdots)$, where each $i_j \in {1,2,3,4}$.&lt;/p&gt;

&lt;p&gt;All that is left to do now is render this series of points. We&#39;ll do them as
tiny SVG circles, similar to how we did with polylines for the L-system fractals
in the previous post.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn- render-svg-points [plot-points size]
  (let [xmlns &amp;quot;http://www.w3.org/2000/svg&amp;quot;
        style &amp;quot;stroke:#5f7f5fBB; fill:#5f7f5fBB;&amp;quot;
        scale-bf (fn [[x y]] [(* 100 x) (* 100 y)])
        points (util/fix-coords (map scale-bf plot-points) size)
        do-circle (fn [pt] (let [[x y] pt]
                             [:circle {:cx (str x)
                                       :cy (str y)
                                       :r &amp;quot;0.2&amp;quot;
                                       :style style}]))
        circles (vec (conj (map do-circle  points) :g))]
    (hiccup/html [:html
                  [:div {:padding 25}
                   [:svg {:width size
                          :height size
                          :xmlns xmlns}
                    circles]]])))

(defn do-BF [num-points]
  (spit &amp;quot;barnsley-fern.html&amp;quot; (render-svg-points (barnsley-fern num-points) 40000)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this with 40K points renders the following.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://martin.varela.fi/img/fractals/barnsley.png&#34; alt=&#34;/img/fractals/barnsley.png&#34; title=&#34;/img/fractals/barnsley.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The actual SVG can be found &lt;a href=&#34;http:/html/fractals/barnsley-fern.html&#34; title=&#34;here&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is interesting to see how the whole pattern repeats in each leaf portion.
Looking closer, we can find the whole fern leaf repeated in each part of itself.&lt;/p&gt;

&lt;h1 id=&#34;and-now-for-the-main-attraction&#34;&gt;And Now for the Main Attraction...&lt;/h1&gt;

&lt;p&gt;The Mandelbrot set is a favorite of mine, and I have to admit that when writing
the code for this renderer, I spent much more time than I had expected just
playing with it, really fascinated by its complexity and beauty.&lt;/p&gt;

&lt;p&gt;The Mandelbrot set $M$ is defined on the complex plane, as those points $c$ for which
the following recurrence remains bounded:
$$ z_{n+1} = z^2_n + c$$ with $z_0 = 0$.&lt;/p&gt;

&lt;p&gt;In particular, $c \in M$ if $\limsup\limits_{n\rightarrow
\infty}\left|z_n\right| \leq 2$.&lt;/p&gt;

&lt;p&gt;In software, we can only approximate the limit of this recurrence with a given
number of iterations, which we refer to as &lt;em&gt;depth&lt;/em&gt;. The deeper we iterate, the
more detail we will obtain in our rendering of the set. A basic approach to
generating the set would consist of defining a depth, a section of the complex
plane where the points we consider will be, and a mapping from a set of pixels
to these points. We then calculate, for each pixel, whether the recurrence
diverges or remains bounded within the given number of iterations, and then
assign a boolean value to whether the point represented by the pixel belongs to
the set.&lt;/p&gt;

&lt;p&gt;We can do a bit better, by considering, instead of a binary value, the number of
iterations that it took for the recurrence to diverge at each point not in the
set. This allows for a bit more nuanced representation when we render it.&lt;/p&gt;

&lt;p&gt;In code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns fractals.mandelbrot
  (:require [com.evocomputing.colors :as c]  ;; we&#39;ll use the HSV space for coloring
            [clojure.string :refer [join]])
  (:import [java.io File]
           [javax.imageio ImageIO]
           [java.awt Color]
           [java.awt.image BufferedImage]))  ;; some java interop for rendering PNGs

(defn- square-z [r i]
  [(- (* r r) (* i i)) (* 2 r i)])

(defn- in-mandelbrot? [point iter]
  &amp;quot;This function will return 0 if the point is in the set, and otherwise, the
  number of remaining iterations remaining (out of the original maximum), if the
  point &#39;escapes&#39; from the set&amp;quot;
  (let [values (iterate #(map + point (square-z (first %) (second %))) [0 0])
        test  (fn[acc [r i]]
                (if (or (&amp;gt;= acc iter) (&amp;gt; (+ (* r r)(* i i)) 4))
                  (reduced acc)
                  (inc acc)))
        counted (reduce test 0 values)]
    (- iter counted)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to actually render the set, we need a bit more work, as we need to
define the mapping of our view-port to a section of the complex plane.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;

(defn- scale-to-bounds
&amp;quot;This function takes a point [x y] in an plot area [[0 0] [xmax ymax]],
  and maps it to a bounding box in the real plane where the plotting will be
  done. The bounding box is defined by its lower left and upper right corners,
  and in practice, should not be much larger than [[-2.5 -1] [1 1]], which is
  where the fun stuff happens&amp;quot;
  [point img-size bounding-box]
  (let [[x y] point
        [xmax ymax] img-size
        [[b-x-min b-y-min][b-x-max b-y-max]] bounding-box
        bx-span (- b-x-max b-x-min)
        by-span (- b-y-max b-y-min)
        xx (- (* bx-span (/ x xmax)) (Math/abs b-x-min))
        yy (- (* by-span (/ y ymax)) (Math/abs b-y-min))]
    [xx yy]))

(defn mandelbrot [size bounding-box depth]
  (let [[xmax ymax] size
        points (for [y (range ymax)
                     x (range xmax)]
                 [x y])
        f (fn[i](-&amp;gt; i
                   (scale-to-bounds size bounding-box)
                   (in-mandelbrot? depth)))]
    (pmap f points)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With these two functions, we have now a representation we can use for plotting.
We can map the view-port to a section of the plane with the ~scale-to-bounds~
function, and then for each point in the view-port, calculate the number of
iterations it took to diverge. This code is simple to understand, but not really
efficient. I suspect there&#39;s a bit of stream fusion that could be applied here
(possibly using transducers in Clojure), or otherwise switch to using mutable
state, but for the sake of simplicity, I&#39;d rather have this pure version for
now.&lt;/p&gt;

&lt;p&gt;Now we can render our set. As a first approach, we could simply use the &lt;a href=&#34;https://en.wikipedia.org/wiki/Netpbm_format&#34; title=&#34;PPM
ASCII format&#34; target=&#34;_blank&#34;&gt;PPM
ASCII format&lt;/a&gt;, which is trivial to implement without any external library:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn do-ppm [points size depth name]
  (let [[x y] size
        contents (-&amp;gt;&amp;gt; points
                      (partition x)
                      (reverse) ;; otherwise we mirror on the x axis
                      (map #(join &amp;quot; &amp;quot; (map str %)))
                      (interpose &amp;quot;\n&amp;quot;)
                      (apply str)
                      )
        header (str &amp;quot;P2\n&amp;quot; (str x) &amp;quot; &amp;quot;
                    (str y) &amp;quot;\n&amp;quot;
                    (str depth) &amp;quot;\n&amp;quot;)]
    (spit name (str header contents))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code is nothing fancy, but it gets us something to look at (and even
within Emacs!):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://martin.varela.fi/img/fractals/full-ppm.png&#34; alt=&#34;/img/fractals/full-ppm.png&#34; title=&#34;/img/fractals/full-ppm.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is pretty cool! However, we can easily do better. We will use a bit of our
host platform to render color PNGs. This will require two things, firstly,
mapping the values we have to color values, and secondly, rendering the PNG
itself. Since we have a sort of &#34;intensity&#34; value for each pixel, in the form of
the number of iterations, we will calculate the color in the HSV space, using a
fixed hue and saturation, and scaling the number of iterations to the value of
the color. This will render the points in the set in black, and those not in it
in different shades.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn do-color [i depth]
  (let [icorr (/ (* i 100.0) depth)
        [r g b] (c/hsl-to-rgb 205 100 icorr)]
    (bit-or (bit-shift-left r 16)
            (bit-shift-left g 8)
            b)))


(defn do-png [points size depth name]
  (ImageIO/write
   (let [width (first size)
         height (second size)
         pts (-&amp;gt;&amp;gt; points
                  (partition width)
                  (reverse)  ;; the y axies grows &amp;quot;downwards&amp;quot; in the PNG
                  (map vec)
                  (vec))
         out (new BufferedImage width height  BufferedImage/TYPE_3BYTE_BGR)]
     (doseq [x (range width)
             y (range height)]
       (.setRGB out x y (do-color (get-in pts [y x]) depth)))
     out)
   &amp;quot;png&amp;quot;
   (new File name )))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have some colors, but to be honest, the result is a bit underwhelming...&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://martin.varela.fi/img/fractals/full-simple.png&#34; alt=&#34;/img/fractals/full-simple.png&#34; title=&#34;/img/fractals/full-simple.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;One thing we can realize, is that most of the &#34;interesting&#34; parts of the render
happen around the limits of the set, so we can modify our coloring function to
reflect that. We do this by making the middle of the iteration range the
brightest, and then decrease the value as we move towards the edges of the
range. For a bit more &#34;drama&#34;, we also treat the saturation similarly. We redefine
then our &lt;code&gt;do-color&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn do-color
  &amp;quot;Maps a new color with the value based on the number of iterations it took
  for the point to escape the set. The plain mapping is rather dull, so here we
  focus on the points which are in the boundaries (intuitively, those that took
  long to escape, but not longest). We calculate the value as the distance
  to the middle value, which results in a nice &#39;electric&#39; look around the edges
  of the set&amp;quot;
  [i depth]
  (let [ icorr (/ (* i 100.0) depth)
        l (- 100 (* 2 (Math/abs (- 50 icorr))))
        s (- 100 (* 1.3 (Math/abs (- 50 icorr))))
        [r g b] (c/hsl-to-rgb 205 s l)]
    (bit-or (bit-shift-left r 16)
            (bit-shift-left g 8)
            b)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now this looks much better! Arguably, the color of the points that diverge very
early could be made lighter, but I like the aesthetics this coloring function
gives. In any case, there are a huge number of possible ways to apply color.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://martin.varela.fi/img/fractals/full.png&#34; alt=&#34;/img/fractals/full.png&#34; title=&#34;/img/fractals/full.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With a suitable rendering mechanism, now we can explore a bit the set, and start
looking into interesting portions. We can &#34;zoom in&#34; as much as we want, by
defining suitable bounding boxes, and we can increase the detail by increasing
the depth. For example, we can take a closer look at the so-called &lt;em&gt;Seahorse
valley&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://martin.varela.fi/img/fractals/seahorse-left.png&#34; alt=&#34;/img/fractals/seahorse-left.png&#34; title=&#34;/img/fractals/seahorse-left.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I find this area of the plane truly fascinating, the patterns and depth of it
are quite something. To give you an idea, here is a 24 megapixel render, with a
depth of 2000 iterations. Go on, click on it, and zoom in to its full size. I&#39;ll
wait for you here.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://martin.varela.fi/img/fractals/seahorse.png&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://martin.varela.fi/img/fractals/seahorse.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Is that wonderful, or what?&lt;/p&gt;

&lt;h1 id=&#34;just-one-more-thing&#34;&gt;Just One More Thing&lt;/h1&gt;

&lt;p&gt;In order to appreciate the Mandelbrot set in all its splendor, it would be nice
to be able to &#34;fall&#34; into it, with an animation. Given that we have a way to
render a view-port onto any area of the plane, it&#39;s not much more effort to
do it for a set of areas along a path, with different magnification levels.&lt;/p&gt;

&lt;p&gt;We will basically start with a target image size (and implied aspect ratio),
centered around a point, and with a given surface area on the complex plane. We
will then choose another point and another target surface area where the last
frame will be centered. All we need to do now is to create the required number
of bounding boxes, interpolating position and size over the number of frames to
render. Going back to our code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns fractals.animate
  (:require [fractals.mandelbrot :as m]
            [clojure.math.numeric-tower :as nt]))

(defn interpolate-centers [start-point end-point nframes]
  (let [[xs ys] start-point
        [xe ye] end-point
        delta-x (- xe xs)
        delta-y (- ye ys)
        step (/ (Math/sqrt (+ (nt/expt delta-x 2)
                              (nt/expt delta-y 2)))
                nframes)
        theta (Math/atan2  delta-y delta-x)
        next-center (fn [[x y]] [(+ x (* step (Math/cos theta)))
                                 (+ y (* step (Math/sin theta)))])]
    (take (inc nframes) (iterate next-center start-point))))

(defn interpolate-areas [start-area ratio nframes]
  (let [step (nt/expt ratio (/ 1.0 nframes))]
    (take (inc nframes)
          (iterate #(/ % step) start-area))))

(defn bounding-box [aspect-ratio area center]
  (let [[x y] center
        dim-y (nt/sqrt (/ area aspect-ratio))
        dim-x (* dim-y aspect-ratio)
        delta-y (/ dim-y 2)
        delta-x (/ dim-x 2)]
    [[(- x delta-x) (- y delta-y)]
     [(+ x delta-x) (+ y delta-y)]]))

(defn animate-mandelbrot [img-width
                          img-height
                          depth
                          start-point
                          end-point
                          start-area
                          zoom-factor
                          nframes]
  (let [centers (interpolate-centers start-point end-point nframes)
        areas (interpolate-areas start-area zoom-factor nframes)
        aspect-ratio (/ img-width img-height)
        size [img-width img-height]
        b-boxes (map (partial bounding-box aspect-ratio) areas centers)
        names (map (partial format &amp;quot;mb-frame-%04d.png&amp;quot;) (range))
        fracs (map #(m/mandelbrot size % depth) b-boxes)]
    (dorun (pmap #(m/do-png %1 size depth %2) fracs names))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code technically has a bug, in that when the center position moves across
the x axis, the movement mirrors in the rendering (because of how the y axis
increases &#34;downwards&#34; on the PNG render), resulting in an angled path,
instead of a straight one. Despite this being simple to fix, I&#39;ll call this a
feature, and leave it in, as it allows for some interesting zooms that would
otherwise require a more generic approach to constructing paths .&lt;/p&gt;

&lt;p&gt;Here is a full-HD clip of us &#34;falling into the Seahorse Valley&#34;. The
magnification factor here is 2400x.
&lt;iframe width=&#34;853&#34; height=&#34;480&#34; src=&#34;https://www.youtube.com/embed/FptVUuB4qWI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h1 id=&#34;that-s-all-folks&#34;&gt;That&#39;s All, Folks!&lt;/h1&gt;

&lt;p&gt;I hope you have enjoyed these posts on fractals as much as I enjoyed writing
them, they were really a lot of fun to play with! The code can be found &lt;a href=&#34;https://github.com/mvarela/Fractal-Playground&#34; title=&#34;on
GitHub&#34; target=&#34;_blank&#34;&gt;on
GitHub&lt;/a&gt; if you want to play with it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
